"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../src/schema.ts"],"names":[],"mappings":";AAAA;;;GAGG","sourcesContent":["/**\n * This file was auto-generated by openapi-typescript.\n * Do not make direct changes to the file.\n */\n\n/** OneOf type helpers */\ntype Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };\ntype XOR<T, U> = T | U extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;\ntype OneOf<T extends any[]> = T extends [infer Only]\n  ? Only\n  : T extends [infer A, infer B, ...infer Rest]\n    ? OneOf<[XOR<A, B>, ...Rest]>\n    : never;\n\nexport interface paths {\n  \"/v0/about_me\": {\n    /**\n     * User Info\n     * @description User Info\n     *\n     * Retrieves information about the current user.\n     */\n    get: operations[\"aboutMeLegacy\"];\n  };\n  \"/v0/org/{org_id}\": {\n    /**\n     * Get Org\n     * @description Get Org\n     *\n     * Retrieves information about an organization.\n     */\n    get: operations[\"getOrg\"];\n    /**\n     * Update Org\n     * @description Update Org\n     *\n     * Update organization attributes (enabled flag, name, and policies).\n     */\n    patch: operations[\"updateOrg\"];\n  };\n  \"/v0/org/{org_id}/ava/sign/{pubkey}\": {\n    /**\n     * Sign Avalanche X- or P-Chain Message\n     * @description Sign Avalanche X- or P-Chain Message\n     *\n     * Signs an Avalanche message with a given SecpAva key.\n     * This is a pre-release feature.\n     */\n    post: operations[\"avaSign\"];\n  };\n  \"/v0/org/{org_id}/btc/sign/{pubkey}\": {\n    /**\n     * Sign Bitcoin Transaction\n     * @description Sign Bitcoin Transaction\n     *\n     * Signs a Bitcoin transaction with a given key.\n     * This is a pre-release feature.\n     */\n    post: operations[\"btcSign\"];\n  };\n  \"/v0/org/{org_id}/derive_key\": {\n    /**\n     * Derive Key From Long-Lived Mnemonic\n     * @description Derive Key From Long-Lived Mnemonic\n     *\n     * Derives a key of a specified type using a supplied derivation path and an\n     * existing long-lived mnemonic.\n     */\n    put: operations[\"deriveKey\"];\n  };\n  \"/v0/org/{org_id}/evm/eip191/sign/{pubkey}\": {\n    /**\n     * Sign EIP-191 Data\n     * @description Sign EIP-191 Data\n     *\n     * Signs a message using EIP-191 personal_sign with a given Secp256k1 key.\n     */\n    post: operations[\"eip191Sign\"];\n  };\n  \"/v0/org/{org_id}/evm/eip712/sign/{pubkey}\": {\n    /**\n     * Sign EIP-712 Typed Data\n     * @description Sign EIP-712 Typed Data\n     *\n     * Signs typed data according to EIP-712 with a given Secp256k1 key.\n     */\n    post: operations[\"eip712Sign\"];\n  };\n  \"/v0/org/{org_id}/identity/prove\": {\n    /**\n     * Create [IdentityProof] from CubeSigner user session\n     * @description Create [IdentityProof] from CubeSigner user session\n     *\n     * This route can be used to prove to another party that a user has a\n     * valid CubeSigner session.\n     *\n     * Clients are intended to call this route and pass the returned evidence\n     * to another service which will verify it by making a request to `/v0/org/<org_id>/identity/verify`.\n     */\n    post: operations[\"createProofCubeSigner\"];\n  };\n  \"/v0/org/{org_id}/identity/prove/oidc\": {\n    /**\n     * Create [IdentityProof] from OIDC token\n     * @description Create [IdentityProof] from OIDC token\n     *\n     * Exchange an OIDC ID token (passed via the `Authorization` header) for a proof of authentication.\n     *\n     * This route can be used to prove to another party that a user has met the\n     * authentication requirements (allowed issuers & audiences) for CubeSigner\n     * without leaking their credentials.\n     *\n     * Clients are intended to call this route and pass the returned evidence to another service\n     * which will verify it by making a request to `/v0/org/<org_id>/identity/verify`.\n     */\n    post: operations[\"createProofOidc\"];\n  };\n  \"/v0/org/{org_id}/identity/verify\": {\n    /**\n     * Verify identity proof\n     * @description Verify identity proof\n     *\n     * Allows a third-party to validate proof of authentication.\n     *\n     * When a third-party is provided an [IdentityProof] object, they must check its\n     * veracity by calling this endpoint\n     */\n    post: operations[\"verifyProof\"];\n  };\n  \"/v0/org/{org_id}/import_key\": {\n    /**\n     * Create Key-Import Key\n     * @description Create Key-Import Key\n     *\n     * Generate an ephemeral key that a client can use for key-import encryption.\n     */\n    get: operations[\"createKeyImportKey\"];\n    /**\n     * Import Key\n     * @description Import Key\n     *\n     * Securely imports an existing key using a previously generated key-import key.\n     */\n    put: operations[\"importKey\"];\n  };\n  \"/v0/org/{org_id}/invite\": {\n    /**\n     * Invite User\n     * @description Invite User\n     *\n     * Creates a new user in an existing org and sends that user an invite email.\n     */\n    post: operations[\"invite\"];\n  };\n  \"/v0/org/{org_id}/keys\": {\n    /**\n     * List Keys\n     * @description List Keys\n     *\n     * Gets the list of owned keys in a given org.\n     */\n    get: operations[\"listKeysInOrg\"];\n    /**\n     * Create Key\n     * @description Create Key\n     *\n     * Creates one or more new keys of the specified type.\n     */\n    post: operations[\"createKey\"];\n  };\n  \"/v0/org/{org_id}/keys/{key_id}\": {\n    /**\n     * Get Key\n     * @description Get Key\n     *\n     * Returns the properties of a key.\n     */\n    get: operations[\"getKeyInOrg\"];\n    /**\n     * Delete Key\n     * @description Delete Key\n     *\n     * Deletes a key specified by its ID.\n     * Only the key owner and org owners are allowed to delete keys.\n     */\n    delete: operations[\"deleteKey\"];\n    /**\n     * Update Key\n     * @description Update Key\n     *\n     * Enable or disable a key.  The user must be the owner of the key or organization to perform this action.\n     */\n    patch: operations[\"updateKey\"];\n  };\n  \"/v0/org/{org_id}/keys/{key_id}/roles\": {\n    /**\n     * List Key Roles\n     * @description List Key Roles\n     *\n     * Get all roles the key is in\n     */\n    get: operations[\"listKeyRoles\"];\n  };\n  \"/v0/org/{org_id}/mfa\": {\n    /**\n     * List Pending MFA Requests\n     * @description List Pending MFA Requests\n     *\n     * Retrieves and returns all pending MFA requests that are accessible to the current user,\n     * i.e., those in which the current user is listed as an approver\n     */\n    get: operations[\"mfaList\"];\n  };\n  \"/v0/org/{org_id}/mfa/{mfa_id}\": {\n    /**\n     * Get Pending MFA Request\n     * @description Get Pending MFA Request\n     *\n     * Retrieves and returns a pending MFA request by its id.\n     */\n    get: operations[\"mfaGet\"];\n    /**\n     * Approve or Reject MFA Request\n     * @description Approve or Reject MFA Request\n     *\n     * Approve or reject request after logging in with CubeSigner.\n     *\n     * If approving, adds the currently-logged user as an approver\n     * of a pending MFA request of the [Status::RequiredApprovers] kind. If the required number of\n     * approvers is reached, the MFA request is approved; the confirmation receipt can be used to\n     * resume the original HTTP request.\n     *\n     * If rejecting, immediately deletes the pending MFA request.\n     */\n    patch: operations[\"mfaVoteCs\"];\n  };\n  \"/v0/org/{org_id}/mfa/{mfa_id}/fido\": {\n    /**\n     * Initiate a FIDO MFA Approval/Rejection\n     * @description Initiate a FIDO MFA Approval/Rejection\n     *\n     * Initiates the approval/rejection process of an MFA Request using FIDO.\n     */\n    post: operations[\"mfaFidoInit\"];\n    /**\n     * Finalize a FIDO MFA Approval/Rejection\n     * @description Finalize a FIDO MFA Approval/Rejection\n     *\n     * If approving, adds an approver to a pending MFA request.\n     * If the required number of approvers is reached, the MFA request is approved;\n     * the confirmation receipt can be used to resume the original HTTP request.\n     *\n     * If rejecting, immediately deletes the pending MFA request.\n     */\n    patch: operations[\"mfaVoteFidoComplete\"];\n  };\n  \"/v0/org/{org_id}/mfa/{mfa_id}/totp\": {\n    /**\n     * Approve/Reject a TOTP MFA Request\n     * @description Approve/Reject a TOTP MFA Request\n     *\n     * If approving, adds the current user as approver to a pending MFA request by\n     * providing TOTP code. If the required number of approvers is reached, the MFA request is\n     * approved; the confirmation receipt can be used to resume the original HTTP request.\n     *\n     * If rejecting, immediately deletes the pending MFA request.\n     */\n    patch: operations[\"mfaVoteTotp\"];\n  };\n  \"/v0/org/{org_id}/oauth2/twitter\": {\n    /**\n     * Mint an OIDC ID token for Twitter\n     * @description Mint an OIDC ID token for Twitter\n     *\n     * This function acts identically to Twitter's [`oauth2/token`](https://developer.twitter.com/en/docs/authentication/api-reference/token) endpoint,\n     * but extends the output with an `id_token`.\n     *\n     * This `id_token` can then be used with any CubeSigner endpoint that requires an OIDC token.\n     *\n     * > [!IMPORTANT]\n     * > This endpoint will fail unless the org is configured to allow the issuer `https://shim.oauth2.cubist.dev/twitter` and client ID being used for Twitter.\n     */\n    post: operations[\"oauth2Twitter\"];\n  };\n  \"/v0/org/{org_id}/oidc\": {\n    /**\n     * Login with OIDC\n     * @description Login with OIDC\n     *\n     * Exchange an OIDC ID token (passed via the `Authorization` header) for a signer session.\n     *\n     * MFA is required when:\n     * - an MFA policy is explicitly attached to the user logging in\n     * (e.g., an org owner can do that at user creation time to require certain kind of MFA)\n     * - the user has at least 1 MFA factor configured\n     */\n    post: operations[\"oidcAuth\"];\n  };\n  \"/v0/org/{org_id}/roles\": {\n    /**\n     * List Roles\n     * @description List Roles\n     *\n     * Retrieves all roles in an organization that the current user is allowed to access.\n     */\n    get: operations[\"listRoles\"];\n    /**\n     * Create Role\n     * @description Create Role\n     *\n     * Creates a new role in an organization. Unless the logged-in user\n     * is the owner, they are automatically added to the newly created role.\n     */\n    post: operations[\"createRole\"];\n  };\n  \"/v0/org/{org_id}/roles/{role_id}\": {\n    /**\n     * Get Role\n     * @description Get Role\n     *\n     * Retrieves information about a role in an organization\n     */\n    get: operations[\"getRole\"];\n    /**\n     * Delete Role\n     * @description Delete Role\n     *\n     * Deletes a role in an organization.\n     * Only users in the role can perform this action.\n     */\n    delete: operations[\"deleteRole\"];\n    /**\n     * Update Role\n     * @description Update Role\n     *\n     * Enables or disables a role (this requires the `manage:role:update:enable` scope).\n     * Updates the role's policies (this requires the `manage:role:update:policy` scope).\n     * The user must be in the role or an owner of the organization.\n     */\n    patch: operations[\"updateRole\"];\n  };\n  \"/v0/org/{org_id}/roles/{role_id}/add_keys\": {\n    /**\n     * Add Keys\n     * @description Add Keys\n     *\n     * Adds a list of existing keys to an existing role.\n     */\n    put: operations[\"addKeysToRole\"];\n  };\n  \"/v0/org/{org_id}/roles/{role_id}/add_user/{user_id}\": {\n    /**\n     * Add User\n     * @description Add User\n     *\n     * Adds an existing user to an existing role.\n     * Only users in the role or owners can add users to a role.\n     */\n    put: operations[\"addUserToRole\"];\n  };\n  \"/v0/org/{org_id}/roles/{role_id}/keys\": {\n    /**\n     * List Role Keys\n     * @description List Role Keys\n     *\n     * Returns an array of all keys in a role.\n     */\n    get: operations[\"listRoleKeys\"];\n  };\n  \"/v0/org/{org_id}/roles/{role_id}/keys/{key_id}\": {\n    /**\n     * Remove Key\n     * @description Remove Key\n     *\n     * Removes a given key from a role\n     */\n    delete: operations[\"removeKeyFromRole\"];\n  };\n  \"/v0/org/{org_id}/roles/{role_id}/tokens\": {\n    /**\n     * List a single page of Tokens (Deprecated)\n     * @deprecated\n     * @description List a single page of Tokens (Deprecated)\n     *\n     * **Deprecated**: Use `GET /org/{org_id}/session?role=`\n     *\n     * Returns all access tokens for a given role.\n     * Only users in the role or owners can create a token for it.\n     */\n    get: operations[\"listRoleTokens\"];\n    /**\n     * Create Token\n     * @description Create Token\n     *\n     * Creates a new access token for a given role (to be used as \"API Key\" for all signing actions).\n     * Only users in the role or owners can create a token for it.\n     */\n    post: operations[\"createRoleToken\"];\n    /**\n     * Revoke All Tokens (Deprecated)\n     * @deprecated\n     * @description Revoke All Tokens (Deprecated)\n     *\n     * **Deprecated**: Use `DELETE /org/{org_id}/session?role=` instead\n     *\n     * Revokes all access tokens associated with a role.\n     * Only users in the role or owners can perform this action.\n     */\n    delete: operations[\"revokeAllRoleTokens\"];\n  };\n  \"/v0/org/{org_id}/roles/{role_id}/tokens/{session_id}\": {\n    /**\n     * Revoke Token (Deprecated)\n     * @deprecated\n     * @description Revoke Token (Deprecated)\n     *\n     * **Deprecated**: Use `DELETE /org/{org_id}/session/{session_id}`\n     *\n     * Revokes an access token associated with a role.\n     * Only users in the role or owners can perform this action.\n     */\n    delete: operations[\"revokeRoleToken\"];\n  };\n  \"/v0/org/{org_id}/roles/{role_id}/users\": {\n    /**\n     * List Role Users.\n     * @description List Role Users.\n     *\n     * Returns an array of all users who have access to a role.\n     */\n    get: operations[\"listRoleUsers\"];\n  };\n  \"/v0/org/{org_id}/roles/{role_id}/users/{user_id}\": {\n    /**\n     * Remove User\n     * @description Remove User\n     *\n     * Removes an existing user from an existing role.\n     * Only users in the role or org owners can remove users from a role.\n     */\n    delete: operations[\"removeUserFromRole\"];\n  };\n  \"/v0/org/{org_id}/session\": {\n    /**\n     * List sessions\n     * @description List sessions\n     *\n     * If no query parameters are provided, information for the current session is returned\n     */\n    get: operations[\"listSessions\"];\n    /**\n     * Create new user session (management and/or signing)\n     * @description Create new user session (management and/or signing)\n     *\n     * Creates a new user session, silently truncating requested session and auth lifetimes\n     * to be at most requestor's session and auth lifetime, respectively.\n     */\n    post: operations[\"createSession\"];\n    /**\n     * Revoke existing session(s)\n     * @description Revoke existing session(s)\n     *\n     * Immediately revokes existing sessions, preventing them from being used or refreshed.\n     * If no query params are provided, the current session is revoked.\n     */\n    delete: operations[\"revokeSessions\"];\n  };\n  \"/v0/org/{org_id}/session/self\": {\n    /**\n     * Revoke current session\n     * @description Revoke current session\n     *\n     * Immediately revokes the current session, preventing it from being used or refreshed\n     */\n    delete: operations[\"revokeCurrentSession\"];\n  };\n  \"/v0/org/{org_id}/session/{session_id}\": {\n    /**\n     * Get session information\n     * @description Get session information\n     */\n    get: operations[\"getSession\"];\n    /**\n     * Revoke a session\n     * @description Revoke a session\n     *\n     * Immediately revokes an existing session, preventing it from being used or refreshed\n     */\n    delete: operations[\"revokeSession\"];\n  };\n  \"/v0/org/{org_id}/solana/sign/{pubkey}\": {\n    /**\n     * Sign Solana Message\n     * @description Sign Solana Message\n     *\n     * Signs a Solana message with a given key.\n     * This is a pre-release feature.\n     */\n    post: operations[\"solanaSign\"];\n  };\n  \"/v0/org/{org_id}/token/keys\": {\n    /**\n     * Get Token-Accessible Keys\n     * @description Get Token-Accessible Keys\n     *\n     * Retrieves the keys that the role token can access.\n     */\n    get: operations[\"listTokenKeys\"];\n  };\n  \"/v0/org/{org_id}/user/me\": {\n    /**\n     * User Info\n     * @description User Info\n     *\n     * Retrieves information about the current user.\n     */\n    get: operations[\"aboutMe\"];\n  };\n  \"/v0/org/{org_id}/user/me/export\": {\n    /**\n     * List outstanding user-export requests\n     * @description List outstanding user-export requests\n     */\n    get: operations[\"userExportList\"];\n    /**\n     * Initiate a user-export request\n     * @description Initiate a user-export request\n     *\n     * This starts a delay (whose length is determined by Org-wide settings)\n     * before export can be completed, and returns a ticket that can be used\n     * to complete the export once the timer has expired.\n     *\n     * Only one user-export request can be active for a given key. If there\n     * is already an active export, this endpoint will return an error. To\n     * create a new request, first delete the existing one.\n     */\n    post: operations[\"userExportInit\"];\n    /**\n     * Delete an existing user-export request\n     * @description Delete an existing user-export request\n     */\n    delete: operations[\"userExportDelete\"];\n    /**\n     * Complete a user-export request\n     * @description Complete a user-export request\n     *\n     * This endpoint can be called only after initiating a user-export request via\n     * the `user_export_init` API, and only within the subsequent export window\n     * (i.e., after the export delay has passed and before the request has expired).\n     *\n     * To check on the status of an export request, see the `user_export_list` API.\n     */\n    patch: operations[\"userExportComplete\"];\n  };\n  \"/v0/org/{org_id}/user/me/fido\": {\n    /**\n     * Initiate registration of a FIDO key\n     * @description Initiate registration of a FIDO key\n     *\n     * Generates a challenge that must be answered to prove ownership of a key\n     */\n    post: operations[\"userRegisterFidoInit\"];\n    /**\n     * Finalize registration of a FIDO key\n     * @description Finalize registration of a FIDO key\n     *\n     * Accepts the response to the challenge generated by the POST to this endpoint.\n     */\n    patch: operations[\"userRegisterFidoComplete\"];\n  };\n  \"/v0/org/{org_id}/user/me/fido/{fido_id}\": {\n    /**\n     * Delete FIDO key\n     * @description Delete FIDO key\n     *\n     * Deletes a FIDO key from the user's account (if the key is not the sole MFA factor). MFA is always required.\n     */\n    delete: operations[\"userDeleteFido\"];\n  };\n  \"/v0/org/{org_id}/user/me/totp\": {\n    /**\n     * Initialize TOTP Reset\n     * @description Initialize TOTP Reset\n     *\n     * Creates a new TOTP challenge that must be answered to prove that the new TOTP\n     * was successfully imported into an authenticator app.\n     *\n     * This operation is allowed if EITHER\n     * - the user account is not yet initialized and no TOTP is already set, OR\n     * - the user has not configured any auth factors;\n     * otherwise, MFA is required.\n     */\n    post: operations[\"userResetTotpInit\"];\n    /**\n     * Delete TOTP\n     * @description Delete TOTP\n     *\n     * Deletes TOTP from the user's account (if TOTP is not the sole MFA factor). MFA is always required.\n     */\n    delete: operations[\"userDeleteTotp\"];\n    /**\n     * Finalize resetting TOTP\n     * @description Finalize resetting TOTP\n     *\n     * Checks if the response contains the correct TOTP code corresponding to the\n     * challenge generated by the POST method of this endpoint.\n     */\n    patch: operations[\"userResetTotpComplete\"];\n  };\n  \"/v0/org/{org_id}/user/me/totp/verify\": {\n    /**\n     * Verify TOTP\n     * @description Verify TOTP\n     *\n     * Checks if a given code matches the current TOTP code for the current user.\n     * Errors with 403 if the current user has not set up TOTP or the code fails verification.\n     */\n    post: operations[\"userVerifyTotp\"];\n  };\n  \"/v0/org/{org_id}/users\": {\n    /**\n     * List users in organization\n     * @description List users in organization\n     */\n    get: operations[\"listUsersInOrg\"];\n    /**\n     * Add a third-party user to the org\n     * @description Add a third-party user to the org\n     */\n    post: operations[\"createOidcUser\"];\n  };\n  \"/v0/org/{org_id}/users/oidc\": {\n    /**\n     * Remove a third-party user from the org\n     * @description Remove a third-party user from the org\n     */\n    delete: operations[\"deleteOidcUser\"];\n  };\n  \"/v0/user/me/fido\": {\n    /**\n     * Initiate registration of a FIDO key\n     * @deprecated\n     * @description Initiate registration of a FIDO key\n     *\n     * Generates a challenge that must be answered to prove ownership of a key\n     */\n    post: operations[\"registerFidoInitLegacy\"];\n    /**\n     * Finalize registration of a FIDO key\n     * @deprecated\n     * @description Finalize registration of a FIDO key\n     *\n     * Accepts the response to the challenge generated by the POST to this endpoint.\n     */\n    patch: operations[\"registerFidoCompleteLegacy\"];\n  };\n  \"/v0/user/me/totp\": {\n    /**\n     * Initialize TOTP Reset\n     * @deprecated\n     * @description Initialize TOTP Reset\n     *\n     * Creates a new TOTP challenge that must be answered to prove that the new TOTP\n     * was successfully imported into an authenticator app.\n     *\n     * This operation is allowed if EITHER\n     * - the user account is not yet initialized and no TOTP is already set, OR\n     * - the user has not configured any auth factors;\n     * otherwise, MFA is required.\n     */\n    post: operations[\"resetTotpInitLegacy\"];\n    /**\n     * Finalize resetting TOTP\n     * @deprecated\n     * @description Finalize resetting TOTP\n     *\n     * Checks if the response contains the correct TOTP code corresponding to the\n     * challenge generated by the POST method of this endpoint.\n     */\n    patch: operations[\"resetTotpCompleteLegacy\"];\n  };\n  \"/v0/user/me/totp/verify\": {\n    /**\n     * Verify TOTP\n     * @deprecated\n     * @description Verify TOTP\n     *\n     * Checks if a given code matches the current TOTP code for the current user.\n     * Errors with 403 if the current user has not set up TOTP or the code fails verification.\n     */\n    post: operations[\"verifyTotpLegacy\"];\n  };\n  \"/v1/org/{org_id}/blob/sign/{key_id}\": {\n    /**\n     * Sign Raw Blob\n     * @description Sign Raw Blob\n     *\n     * Signs an arbitrary blob with a given key.\n     * This is a pre-release feature.\n     *\n     * - ECDSA signatures are serialized as big-endian r and s plus recovery-id\n     * byte v, which can in general take any of the values 0, 1, 2, or 3.\n     *\n     * - EdDSA signatures are serialized in the standard format.\n     *\n     * - BLS signatures are not supported on the blob-sign endpoint.\n     */\n    post: operations[\"blobSign\"];\n  };\n  \"/v1/org/{org_id}/cube3signer/heartbeat\": {\n    /**\n     * Record heartbeat\n     * @description Record heartbeat\n     *\n     * This endpoint is called by the cube3signer proxy to record various metrics to CloudWatch.\n     */\n    post: operations[\"cube3signerHeartbeat\"];\n  };\n  \"/v1/org/{org_id}/eth1/sign/{pubkey}\": {\n    /**\n     * Sign EVM Transaction\n     * @description Sign EVM Transaction\n     *\n     * Signs an Ethereum (and other EVM) transaction with a given Secp256k1 key.\n     * Returns an RLP-encoded transaction with EIP-155 signature.\n     *\n     * The key must be associated with the role and organization on whose behalf this action is called.\n     */\n    post: operations[\"eth1Sign\"];\n  };\n  \"/v1/org/{org_id}/eth2/sign/{pubkey}\": {\n    /**\n     * Sign Validator Request\n     * @description Sign Validator Request\n     *\n     * Signs an eth2 validator request with a given BLS key.\n     *\n     * The key must be associated with the role and organization on whose behalf this action is called.\n     */\n    post: operations[\"eth2Sign\"];\n  };\n  \"/v1/org/{org_id}/eth2/stake\": {\n    /**\n     * Sign Stake Deposit\n     * @description Sign Stake Deposit\n     *\n     * Signs a deposit transaction with a `validator_key`. If `validator_key` is set to a pregenerated key, we use the\n     * provided validator key. Otherwise, we generate a new BLS key.\n     *\n     * When using a pregenerated key, the key must be associated with the role and organization on whose\n     * behalf this action is called.\n     */\n    post: operations[\"stake\"];\n  };\n  \"/v1/org/{org_id}/eth2/unstake/{pubkey}\": {\n    /**\n     * Sign Unstake Request\n     * @description Sign Unstake Request\n     *\n     * Handle unstaking request, producing a signed voluntary exit message\n     * that can be posted directly to the Beacon chain.\n     *\n     * The key must be associated with the role and organization on whose behalf this action is called.\n     */\n    post: operations[\"unstake\"];\n  };\n  \"/v1/org/{org_id}/token/refresh\": {\n    /**\n     * Refresh Signer Session\n     * @description Refresh Signer Session\n     */\n    patch: operations[\"signerSessionRefresh\"];\n  };\n}\n\nexport type webhooks = Record<string, never>;\n\nexport interface components {\n  schemas: {\n    AcceptedResponse: components[\"schemas\"][\"ErrorResponse\"] & Record<string, never>;\n    /**\n     * @description Different responses we return for status code \"202 Accepted\".\n     *\n     * Even though \"202 Accepted\" is a successful response, we represent\n     * it as a Rust error because that makes it easy to have route handlers\n     * return `Result<T, SignerError>` where `T` is the type of the\n     * response for the status code \"200 Ok\".\n     */\n    AcceptedValue: {\n      MfaRequired: {\n        /** @description MFA request id */\n        id: string;\n        /** @description Organization id */\n        org_id: string;\n        session?: components[\"schemas\"][\"NewSessionResponse\"] | null;\n      };\n    };\n    /** @enum {string} */\n    AcceptedValueCode: \"MfaRequired\";\n    AddKeysToRoleRequest: {\n      /**\n       * @description A list of keys to add to a role\n       * @example [\n       *   \"Key#63023a27-1e70-430a-b293-ffbc9d6c4484\"\n       * ]\n       */\n      key_ids: string[];\n      /**\n       * @description Optional policies to apply for each key\n       * @example [\n       *   {\n       *     \"TxReceiver\": \"0x8c594691c0e592ffa21f153a16ae41db5befcaaa\"\n       *   },\n       *   {\n       *     \"TxDeposit\": {\n       *       \"kind\": \"Canonical\"\n       *     }\n       *   },\n       *   {\n       *     \"RequireMfa\": {\n       *       \"kind\": {\n       *         \"RequiredApprovers\": {\n       *           \"count\": 1\n       *         }\n       *       },\n       *       \"restricted_operations\": [\n       *         \"Eth1Sign\",\n       *         \"BlobSign\"\n       *       ]\n       *     }\n       *   }\n       * ]\n       */\n      policy?: Record<string, never>[] | null;\n    };\n    AddThirdPartyUserRequest: {\n      /**\n       * @description User email\n       * @example alice@example.com\n       */\n      email: string;\n      identity: components[\"schemas\"][\"OIDCIdentity\"];\n      /** @description Optional login MFA policy */\n      mfa_policy?: unknown;\n      /**\n       * @description Optional user full name\n       * @example Alice Wonderland\n       */\n      name?: string | null;\n      role: components[\"schemas\"][\"MemberRole\"];\n    };\n    AddThirdPartyUserResponse: {\n      /** @example User#c3b9379c-4e8c-4216-bd0a-65ace53cf98f */\n      user_id: string;\n    };\n    ApprovalInfo: {\n      timestamp: components[\"schemas\"][\"EpochDateTime\"];\n    };\n    /**\n     * @description WebAuthn Relying Parties may use AttestationConveyancePreference to specify\n     * their preference regarding attestation conveyance during credential\n     * generation.\n     *\n     * https://www.w3.org/TR/webauthn-2/#enumdef-attestationconveyancepreference\n     * @enum {string}\n     */\n    AttestationConveyancePreference: \"none\" | \"indirect\" | \"direct\" | \"enterprise\";\n    /** @description Data required for both `authenticate` and `refresh`. */\n    AuthData: {\n      /** Format: int32 */\n      epoch_num: number;\n      epoch_token: components[\"schemas\"][\"B32\"];\n      other_token: string;\n    };\n    /**\n     * @description Represents the assertion response used by clients when attempting to log in with a known credential\n     * https://www.w3.org/TR/webauthn-2/#authenticatorassertionresponse\n     */\n    AuthenticatorAssertionResponse: {\n      /**\n       * @description Contains the standard CTAP2 authenticator data. Must be a valid [`AuthenticatorData`].\n       * This contains information about how key was invoked.\n       * https://www.w3.org/TR/webauthn-2/#dom-authenticatorassertionresponse-authenticatordata\n       */\n      authenticatorData: string;\n      /**\n       * @description Contains UTF8 encoded JSON which must be a valid [`ClientData`]\n       * This data is combined with `authenticator_data` to produce the signature\n       * meaning the client attests to the correctness of this data.\n       * https://www.w3.org/TR/webauthn-2/#dom-authenticatorresponse-clientdatajson\n       */\n      clientDataJSON: string;\n      /**\n       * @description The signature of the concatenated `authenticatorData || hash` where\n       * `hash` is the SHA256 hash of the `clientDataJSON` buffer:\n       *\n       * Field Definition: https://www.w3.org/TR/webauthn-2/#dom-authenticatorassertionresponse-signature\n       * Step 11 of `getAssertion` specifies the concatenation: https://www.w3.org/TR/webauthn-2/#sctn-op-get-assertion\n       * Requirement for SHA-256: https://www.w3.org/TR/webauthn-2/#collectedclientdata-hash-of-the-serialized-client-data\n       */\n      signature: string;\n      /**\n       * @description Allows the authenticator to optionally declare the credential identifier they used.\n       * https://www.w3.org/TR/webauthn-2/#dom-authenticatorassertionresponse-userhandle\n       */\n      userHandle?: string | null;\n    };\n    /**\n     * @description This enumeration’s values describe authenticators' attachment modalities.\n     * Relying Parties use this to express a preferred authenticator attachment\n     * modality when calling navigator.credentials.create() to create a credential.\n     *\n     * https://www.w3.org/TR/webauthn-2/#enumdef-authenticatorattachment\n     * @enum {string}\n     */\n    AuthenticatorAttachment: \"platform\" | \"cross-platform\";\n    /**\n     * @description The AuthenticatorAttestationResponse interface represents the authenticator's\n     * response to a client’s request for the creation of a new public key\n     * credential. It contains information about the new credential that can be\n     * used to identify it for later use, and metadata that can be used by the\n     * WebAuthn Relying Party to assess the characteristics of the credential\n     * during registration.\n     *\n     * https://www.w3.org/TR/webauthn-2/#iface-authenticatorattestationresponse\n     */\n    AuthenticatorAttestationResponse: {\n      /**\n       * @description This attribute contains an attestation object, which is opaque to, and\n       * cryptographically protected against tampering by, the client. The\n       * attestation object contains both authenticator data and an attestation\n       * statement. The former contains the AAGUID, a unique credential ID, and\n       * the credential public key. The contents of the attestation statement are\n       * determined by the attestation statement format used by the\n       * authenticator. It also contains any additional information that the\n       * Relying Party's server requires to validate the attestation statement,\n       * as well as to decode and validate the authenticator data along with the\n       * JSON-compatible serialization of client data. For more details, see\n       * § 6.5 Attestation, § 6.5.4 Generating an Attestation Object, and Figure\n       * 6.\n       */\n      attestationObject: string;\n      /**\n       * @description This attribute, inherited from AuthenticatorResponse, contains the\n       * JSON-compatible serialization of client data (see § 6.5 Attestation)\n       * passed to the authenticator by the client in order to generate this\n       * credential. The exact JSON serialization MUST be preserved, as the hash\n       * of the serialized client data has been computed over it.\n       */\n      clientDataJSON: string;\n    };\n    /**\n     * @description WebAuthn Relying Parties may use the AuthenticatorSelectionCriteria\n     * dictionary to specify their requirements regarding authenticator\n     * attributes.\n     *\n     * https://www.w3.org/TR/webauthn-2/#dictdef-authenticatorselectioncriteria\n     */\n    AuthenticatorSelectionCriteria: {\n      authenticatorAttachment?: components[\"schemas\"][\"AuthenticatorAttachment\"] | null;\n      /**\n       * @description This member is retained for backwards compatibility with WebAuthn Level\n       * 1 and, for historical reasons, its naming retains the deprecated\n       * “resident” terminology for discoverable credentials. Relying Parties\n       * SHOULD set it to true if, and only if, residentKey is set to required.\n       *\n       * https://www.w3.org/TR/webauthn-2/#dom-authenticatorselectioncriteria-requireresidentkey\n       */\n      requireResidentKey?: boolean;\n      residentKey?: components[\"schemas\"][\"ResidentKeyRequirement\"] | null;\n      userVerification?: components[\"schemas\"][\"UserVerificationRequirement\"];\n    };\n    /**\n     * @description Authenticators may implement various transports for communicating with\n     * clients. This enumeration defines hints as to how clients might communicate\n     * with a particular authenticator in order to obtain an assertion for a\n     * specific credential. Note that these hints represent the WebAuthn Relying\n     * Party's best belief as to how an authenticator may be reached. A Relying\n     * Party will typically learn of the supported transports for a public key\n     * credential via getTransports().\n     *\n     * https://www.w3.org/TR/webauthn-2/#enumdef-authenticatortransport\n     * @enum {string}\n     */\n    AuthenticatorTransport: \"usb\" | \"nfc\" | \"ble\" | \"internal\";\n    /** @description Request to sign an Avalanche transactions */\n    AvaSignRequest: {\n      /**\n       * @description Transaction to sign.\n       *\n       * Examples:\n       * - {\"P\": { \"AddPermissionlessValidator\": [TxJson](https://github.com/ava-labs/avalanche-rs/blob/avalanche-types-v0.1.3/crates/avalanche-types/src/platformvm/txs/add_permissionless_validator.rs#L14) }}\n       * - {\"P\": { \"AddSubnetValidator\": [TxJson](https://github.com/ava-labs/avalanche-rs/blob/avalanche-types-v0.1.3/crates/avalanche-types/src/platformvm/txs/add_subnet_validator.rs#L29) }}\n       * - {\"P\": { \"AddValidator\": [TxJson](https://github.com/ava-labs/avalanche-rs/blob/avalanche-types-v0.1.3/crates/avalanche-types/src/platformvm/txs/add_validator.rs#L12) }}\n       * - {\"P\": { \"CreateChain\": [TxJson](https://github.com/ava-labs/avalanche-rs/blob/avalanche-types-v0.1.3/crates/avalanche-types/src/platformvm/txs/create_chain.rs#L8) }}\n       * - {\"P\": { \"CreateSubnet\": [TxJson](https://github.com/ava-labs/avalanche-rs/blob/avalanche-types-v0.1.3/crates/avalanche-types/src/platformvm/txs/create_subnet.rs#L8) }}\n       * - {\"P\": { \"Export\": [TxJson](https://github.com/ava-labs/avalanche-rs/blob/avalanche-types-v0.1.3/crates/avalanche-types/src/platformvm/txs/export.rs#L12) }}\n       * - {\"P\": { \"Import\": [TxJson](https://github.com/ava-labs/avalanche-rs/blob/avalanche-types-v0.1.3/crates/avalanche-types/src/platformvm/txs/import.rs#L12) }}\n       * - {\"X\": { \"Base\": [TxJson](https://github.com/ava-labs/avalanche-rs/blob/avalanche-types-v0.1.3/crates/avalanche-types/src/avm/txs/mod.rs#L21) }}\n       * - {\"X\": { \"Export\": [TxJson](https://github.com/ava-labs/avalanche-rs/blob/avalanche-types-v0.1.3/crates/avalanche-types/src/avm/txs/export.rs#L16) }}\n       * - {\"X\": { \"Import\": [TxJson](https://github.com/ava-labs/avalanche-rs/blob/avalanche-types-v0.1.3/crates/avalanche-types/src/avm/txs/import.rs#L14) }}\n       */\n      tx: Record<string, never>;\n    };\n    AvaSignResponse: {\n      /** @description The hex-encoded signature. */\n      signature: string;\n    };\n    /** @description Wrapper around a zeroizing 32-byte fixed-size array */\n    B32: string;\n    /** @enum {string} */\n    BadGatewayErrorCode: \"OAuthProviderError\";\n    /** @enum {string} */\n    BadRequestErrorCode:\n      | \"GenericBadRequest\"\n      | \"InvalidBody\"\n      | \"TokenRequestError\"\n      | \"InvalidMfaReceipt\"\n      | \"InvalidMfaPolicyCount\"\n      | \"InvalidMfaPolicyNumAuthFactors\"\n      | \"InvalidMfaPolicyNumAllowedApprovers\"\n      | \"InvalidMfaPolicyRedundantRule\"\n      | \"InvalidCreateKeyCount\"\n      | \"OrgInviteExistingUser\"\n      | \"OrgNameTaken\"\n      | \"RoleNameTaken\"\n      | \"AddKeyToRoleCountTooHigh\"\n      | \"InvalidKeyId\"\n      | \"InvalidKeyMetadataLength\"\n      | \"InvalidKeyMetadata\"\n      | \"InvalidKeyMaterialId\"\n      | \"KeyNotFound\"\n      | \"UserExportDerivedKey\"\n      | \"UserExportPublicKeyInvalid\"\n      | \"UserExportInProgress\"\n      | \"RoleNotFound\"\n      | \"InvalidMfaReceiptOrgIdMissing\"\n      | \"InvalidMfaReceiptInvalidOrgId\"\n      | \"MfaRequestNotFound\"\n      | \"InvalidKeyType\"\n      | \"InvalidKeyMaterial\"\n      | \"InvalidHexValue\"\n      | \"InvalidBase32Value\"\n      | \"InvalidBase58Value\"\n      | \"InvalidForkVersionLength\"\n      | \"InvalidEthAddress\"\n      | \"InvalidStellarAddress\"\n      | \"InvalidOrgNameOrId\"\n      | \"InvalidStakeDeposit\"\n      | \"InvalidBlobSignRequest\"\n      | \"InvalidSolanaSignRequest\"\n      | \"InvalidEip712SignRequest\"\n      | \"InvalidEvmSignRequest\"\n      | \"InvalidEth2SignRequest\"\n      | \"InvalidDeriveKeyRequest\"\n      | \"InvalidStakingAmount\"\n      | \"CustomStakingAmountNotAllowedForWrapperContract\"\n      | \"InvalidUnstakeRequest\"\n      | \"InvalidCreateUserRequest\"\n      | \"UserAlreadyExists\"\n      | \"UserNotFound\"\n      | \"PolicyRuleKeyMismatch\"\n      | \"EmptyScopes\"\n      | \"InvalidScopesForRoleSession\"\n      | \"InvalidLifetime\"\n      | \"NoSingleKeyForUser\"\n      | \"InvalidOrgPolicyRule\"\n      | \"SourceIpAllowlistEmpty\"\n      | \"InvalidOrgPolicyRepeatedRule\"\n      | \"AvaSignHashError\"\n      | \"AvaSignError\"\n      | \"BtcSegwitHashError\"\n      | \"BtcSignError\"\n      | \"Eip712SignError\"\n      | \"InvalidMemberRoleInUserAdd\"\n      | \"ThirdPartyUserAlreadyExists\"\n      | \"ThirdPartyUserNotFound\"\n      | \"DeleteOidcUserError\"\n      | \"SessionRoleMismatch\"\n      | \"InvalidOidcToken\"\n      | \"OidcIssuerUnsupported\"\n      | \"OidcIssuerNotAllowed\"\n      | \"OidcIssuerNoApplicableJwk\"\n      | \"FidoKeyAlreadyRegistered\"\n      | \"FidoKeySignCountTooLow\"\n      | \"FidoVerificationFailed\"\n      | \"FidoChallengeMfaMismatch\"\n      | \"UnsupportedLegacyCognitoSession\"\n      | \"InvalidIdentityProof\"\n      | \"PaginationDataExpired\"\n      | \"ExistingKeysViolateExclusiveKeyAccess\"\n      | \"ExportDelayTooShort\"\n      | \"ExportWindowTooLong\"\n      | \"InvalidTotpFailureLimit\"\n      | \"InvalidEip191SignRequest\"\n      | \"CannotResendUserInvitation\"\n      | \"InvalidNotificationEndpointCount\"\n      | \"InvalidNotificationUrlProtocol\"\n      | \"EmptyOneOfOrgEventFilter\";\n    /**\n     * @example {\n     *   \"message_base64\": \"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTYK\"\n     * }\n     */\n    BlobSignRequest: {\n      /**\n       * @description The blob to sign, encoded as a base64 string.\n       *\n       * Note that certain signing keys impose additional requirements on the contents of\n       * the message. For example, Secp256k1 keys require that the message is 32 bytes long.\n       */\n      message_base64: string;\n    };\n    BlobSignResponse: {\n      /** @description The hex-encoded signature. */\n      signature: string;\n    };\n    /** @enum {string} */\n    BtcSighashType:\n      | \"All\"\n      | \"None\"\n      | \"Single\"\n      | \"AllPlusAnyoneCanPay\"\n      | \"NonePlusAnyoneCanPay\"\n      | \"SinglePlusAnyoneCanPay\";\n    BtcSignRequest: {\n      sig_kind: components[\"schemas\"][\"BtcSignatureKind\"];\n      /** @description The bitcoin transaction to sign */\n      tx: Record<string, never>;\n    };\n    BtcSignResponse: {\n      /**\n       * @description The hex-encoded signature in compact format.\n       * @example 0x454aef27c21df7dd8f537dc869f4cd65286ce239a52d36470f4d85be85a891b02789e5ffd8560b32a98110e5d0096802e4c14145cf6c44f10a768c87755eaa4800\n       */\n      signature: string;\n    };\n    BtcSignatureKind: {\n      /** @description Segregated Witness */\n      Segwit: {\n        /**\n         * @description Transaction input index\n         * @example 0\n         */\n        input_index: number;\n        /**\n         * @description Script\n         * @example 0x76a91479091972186c449eb1ded22b78e40d009bdf008988ac\n         */\n        script_code: string;\n        sighash_type: components[\"schemas\"][\"BtcSighashType\"];\n        /**\n         * Format: int64\n         * @description Amount in satoshis\n         * @example 1000000\n         */\n        value: number;\n      };\n    };\n    /** @description Describes how to derive a WebAuthn challenge value. */\n    ChallengePieces: {\n      /**\n       * @description A base64url encoding of UTF8 JSON. The data in that JSON is endpoint specific, and describes what this FIDO challenge will be used for.\n       *\n       * Clients can use `preimage` along with `random_seed` to reconstruct the challenge like so:\n       *\n       * `challenge = HMAC-SHA256(key=random_seed, message=preimage)`\n       */\n      preimage: string;\n      /** @description A random seed that prevents replay attacks */\n      random_seed: string;\n    };\n    /**\n     * @description Session information sent to the client.\n     * This struct works in tandem with its server-side counterpart [`SessionData`].\n     */\n    ClientSessionInfo: {\n      /** @description Token to use for authorization. */\n      auth_token: string;\n      auth_token_exp: components[\"schemas\"][\"EpochDateTime\"];\n      /**\n       * Format: int32\n       * @description Epoch at which the token was last refreshed\n       */\n      epoch: number;\n      epoch_token: components[\"schemas\"][\"B32\"];\n      /** @description Token to use for refreshing the `(auth, refresh)` token pair */\n      refresh_token: string;\n      refresh_token_exp: components[\"schemas\"][\"EpochDateTime\"];\n      /** @description Session ID */\n      session_id: string;\n    };\n    ConfiguredMfa:\n      | {\n          /** @enum {string} */\n          type: \"totp\";\n        }\n      | {\n          /** @description A unique credential id */\n          id: string;\n          /** @description A human-readable name given to the key */\n          name: string;\n          /** @enum {string} */\n          type: \"fido\";\n        };\n    CreateKeyImportKeyResponse: components[\"schemas\"][\"KeyImportKey\"] & {\n      /**\n       * @description An attestation document from a secure enclave, including an\n       * RSA signing key used to sign the contents of this message.\n       */\n      enclave_attestation: string;\n      /**\n       * @description An RSA-PSS-SHA256 signature on the public key and encrypted\n       * secrets attesting to their generation inside a secure enclave.\n       */\n      enclave_signature: string;\n    };\n    CreateKeyRequest: {\n      /**\n       * Format: int64\n       * @description Chain id for which the key is allowed to sign messages\n       * @example 5\n       */\n      chain_id?: number | null;\n      /**\n       * Format: int32\n       * @description Number of keys to create\n       * @example 1\n       */\n      count: number;\n      key_type: components[\"schemas\"][\"KeyType\"];\n      /**\n       * @description Allows users to specify a user other than themselves to receive the key\n       * @example User#c3b9379c-4e8c-4216-bd0a-65ace53cf98f\n       */\n      owner?: string | null;\n    };\n    CreateKeyResponse: {\n      /** @description The info about the created keys */\n      keys: components[\"schemas\"][\"KeyInfo\"][];\n    };\n    /** @description Optional create role request body */\n    CreateRoleRequest: {\n      /**\n       * @description A human-readable name for the role.\n       * @example my_role\n       */\n      name: string;\n    };\n    /** @description The newly created role information */\n    CreateRoleResponse: {\n      /**\n       * @description A human-readable name for the role.\n       * @example my_role\n       */\n      name?: string | null;\n      /**\n       * @description The id of the newly created role\n       * @example Role#bfe3eccb-731e-430d-b1e5-ac1363e6b06b\n       */\n      role_id: string;\n    };\n    CreateSessionRequest: components[\"schemas\"][\"RatchetConfig\"] & {\n      /**\n       * @description A human readable description of the session's purpose\n       * @example Manage keys on server foo.bar\n       */\n      purpose: string;\n      /**\n       * @description Controls what capabilities this session will have.\n       * @example [\n       *   \"manage:key:*\"\n       * ]\n       */\n      scopes: string[];\n    };\n    CreateTokenRequest: components[\"schemas\"][\"RatchetConfig\"] & {\n      /**\n       * @description A human readable description of the purpose of the key\n       * @example Validator Signing\n       */\n      purpose: string;\n      /**\n       * @description Controls what capabilities this session will have. By default, it has all\n       * signing capabilities, i.e., just the 'sign:*' scope.\n       * @example [\n       *   \"sign:*\"\n       * ]\n       */\n      scopes?: string[] | null;\n    };\n    /**\n     * @description An extended form of `PublicKeyCredentialCreationOptions` that allows clients to derive the WebAuthn challenge\n     * from a structured preimage.\n     *\n     * This ensures that the webuathn signature can only be used for a specific purpose\n     */\n    CreationOptionsWithHash: components[\"schemas\"][\"ChallengePieces\"] & {\n      options: components[\"schemas\"][\"PublicKeyCredentialCreationOptions\"];\n    };\n    CubeSignerUserInfo: {\n      /** @description All multi-factor authentication methods configured for this user */\n      configured_mfa: components[\"schemas\"][\"ConfiguredMfa\"][];\n      /** @description Set once the user successfully logs into CubeSigner */\n      initialized: boolean;\n      /** @description Optional human name for the user */\n      name?: string | null;\n      /** @description CubeSigner's user identifier */\n      user_id: string;\n    };\n    /**\n     * @description Information produced by a successful deposit\n     * @example {\n     *   \"chain_id\": 5,\n     *   \"deposit_txn\": {\n     *     \"data\": \"0x...\",\n     *     \"to\": \"0xff50ed3d0ec03ac01d4c79aad74928bff48a7b2b\",\n     *     \"value\": \"0x1bc16d674ec800000\"\n     *   },\n     *   \"new_validator_pk\": \"9700fbb8c906942442c2a5b3ad7498f27aedda253786a6fbaa8fef47fb7af234e50cf2cce815a553087992ae565d48da\"\n     * }\n     */\n    DepositTxn: {\n      /**\n       * Format: int64\n       * @description Chain ID for which the deposit transaction was created\n       */\n      chain_id: number;\n      /** @description The deposit transaction. Includes only `to`, `value`, and `data` fields. */\n      deposit_txn: Record<string, never>;\n      /** @description The hex-encoded compressed form of the new validator BLS public key */\n      new_validator_pk: string;\n    };\n    /**\n     * @description The type of deposit to perform\n     * @enum {string}\n     */\n    DepositType: \"Canonical\" | \"Wrapper\";\n    DeriveKeyRequest: {\n      /**\n       * @description One or more derivation paths from which to derive keys.\n       * @example [\n       *   \"m/44'/60'/0'/0/0\",\n       *   \"m/44'/9000'/0'/0/0\"\n       * ]\n       */\n      derivation_path: string[];\n      key_type: components[\"schemas\"][\"KeyType\"];\n      /**\n       * @description Material-id of the mnemonic to use for derivation\n       * @example 0x9f07be82d934fcb5d0f75dd24c2dfea8a85a4d0c289d58828b3537fae24d32b8\n       */\n      mnemonic_id: string;\n    };\n    Eip191Or712SignResponse: {\n      /**\n       * @description Hex-encoded signature comprising 65 bytes in the format required\n       * by ecrecover: 32-byte r, 32-byte s, and one-byte recovery-id v\n       * which is either 27 or 28.\n       * @example 0x4355c47d63924e8a72e509b65029052eb6c299d53a04e167c5775fd466751c9d07299936d304c153f6443dfa05f40ff007d72911b6f72307f996231605b915621c\n       */\n      signature: string;\n    };\n    Eip191SignRequest: {\n      /**\n       * @description EIP-191 data to sign as hex-encoded bytes.\n       * @example 0xdeadbeef13c0ffee\n       */\n      data: string;\n    };\n    /**\n     * @example {\n     *   \"chain_id\": 1337,\n     *   \"typed_data\": {\n     *     \"domain\": {\n     *       \"chainId\": 1337,\n     *       \"name\": \"Ether Mail\",\n     *       \"verifyingContract\": \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\n     *       \"version\": \"1\"\n     *     },\n     *     \"message\": {\n     *       \"contents\": \"Hello, Bob!\",\n     *       \"from\": {\n     *         \"name\": \"Cow\",\n     *         \"wallets\": [\n     *           \"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826\",\n     *           \"0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF\"\n     *         ]\n     *       },\n     *       \"to\": {\n     *         \"name\": \"Bob\",\n     *         \"wallets\": [\n     *           \"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\",\n     *           \"0xB0BdaBea57B0BDABeA57b0bdABEA57b0BDabEa57\",\n     *           \"0xB0B0b0b0b0b0B000000000000000000000000000\"\n     *         ]\n     *       }\n     *     },\n     *     \"primaryType\": \"Mail\",\n     *     \"types\": {\n     *       \"EIP712Domain\": [\n     *         {\n     *           \"name\": \"name\",\n     *           \"type\": \"string\"\n     *         },\n     *         {\n     *           \"name\": \"version\",\n     *           \"type\": \"string\"\n     *         },\n     *         {\n     *           \"name\": \"chainId\",\n     *           \"type\": \"uint256\"\n     *         },\n     *         {\n     *           \"name\": \"verifyingContract\",\n     *           \"type\": \"address\"\n     *         }\n     *       ],\n     *       \"Group\": [\n     *         {\n     *           \"name\": \"name\",\n     *           \"type\": \"string\"\n     *         },\n     *         {\n     *           \"name\": \"members\",\n     *           \"type\": \"Person[]\"\n     *         }\n     *       ],\n     *       \"Mail\": [\n     *         {\n     *           \"name\": \"from\",\n     *           \"type\": \"Person\"\n     *         },\n     *         {\n     *           \"name\": \"to\",\n     *           \"type\": \"Person\"\n     *         },\n     *         {\n     *           \"name\": \"contents\",\n     *           \"type\": \"string\"\n     *         }\n     *       ],\n     *       \"Person\": [\n     *         {\n     *           \"name\": \"name\",\n     *           \"type\": \"string\"\n     *         },\n     *         {\n     *           \"name\": \"wallets\",\n     *           \"type\": \"address[]\"\n     *         }\n     *       ]\n     *     }\n     *   }\n     * }\n     */\n    Eip712SignRequest: {\n      /**\n       * Format: int64\n       * @description The chain-id to which this typed data will be sent\n       */\n      chain_id: number;\n      /** @description EIP-712 typed data. Refer to the JSON schema defined in EIP-712. */\n      typed_data: Record<string, never>;\n    };\n    /** @default null */\n    Empty: unknown;\n    EmptyImpl: {\n      status: string;\n    };\n    /**\n     * @description Epoch is a quoted `uint64`.\n     * @example 256\n     */\n    Epoch: string;\n    /**\n     * Format: int64\n     * @description DateTime measured in seconds since unix epoch.\n     * A wrapper type for serialization that encodes a [`SystemTime`] as a [`u64`]\n     * representing the number of seconds since [`SystemTime::UNIX_EPOCH`].\n     */\n    EpochDateTime: number;\n    /** @description The structure of ErrorResponse must match the response template that AWS uses */\n    ErrorResponse: {\n      accepted?: components[\"schemas\"][\"AcceptedValue\"] | null;\n      error_code: components[\"schemas\"][\"SignerErrorCode\"];\n      /** @description Error message */\n      message: string;\n      /** @description Optional request identifier */\n      request_id?: string;\n    };\n    /**\n     * @example {\n     *   \"chain_id\": 43113,\n     *   \"tx\": {\n     *     \"chain_id\": \"0xa869\",\n     *     \"gas\": \"0x61a80\",\n     *     \"maxFeePerGas\": \"0x9502F900\",\n     *     \"maxPriorityFeePerGas\": \"0x50\",\n     *     \"nonce\": \"0xb\",\n     *     \"to\": \"0xf00ba12f00000000b4121200000f00c0ffeef00d\",\n     *     \"type\": \"0x02\",\n     *     \"value\": \"0x10000000000\"\n     *   }\n     * }\n     */\n    Eth1SignRequest: {\n      /**\n       * Format: int64\n       * @description The chain id to set in the given transaction.\n       */\n      chain_id: number;\n      /**\n       * @description EIP-2718 typed transaction (see the [ethers-rs\n       * interface](https://docs.rs/ethers/latest/ethers/types/struct.Eip1559TransactionRequest.html)) types, including EIP-1559 transactions (`{ \"type\": \"0x02\" ... }`), and legacy\n       * transactions (`{ \"type\": \"0x00\" ... }`). All values in the transaction are expected\n       * to be (0x-prefixed or not) hex strings or byte arrays.\n       */\n      tx: Record<string, never>;\n    };\n    Eth1SignResponse: {\n      /**\n       * @description Hex-encoded RLP encoding of the transaction and its signature\n       * @example 0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001201d58656b0e22aaa68fdc692db41979098c3886ed33015d7467de9211609cdac000000000000000000000000000000000000000000000000000000000000000308b0c2900324d3ff9adfba7fdfe5af3f9b2cdbeef7b280437bbf1b1c59a093d615afe3e5dfed9622b540cdd9b49b3c5ad00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002001000000000000000000000049011adbcc3bc9c0307bb07f37dda1a1a9c69d2e0000000000000000000000000000000000000000000000000000000000000060903db8525674b8e7904f9b7d7d9ec55a0a42d33cf58be25469b0c21bbb6d06172bc5bb5fd1aed8e4f35936968958116b0619553c2cb1c52e7323074c6f8eb3d5a7074fc6580148df907837fa3b164ad7fbc2288dad1e8a5b021095b57c8a36d4\n       */\n      rlp_signed_tx: string;\n    };\n    /**\n     * @example {\n     *   \"eth2_sign_request\": {\n     *     \"aggregation_slot\": {\n     *       \"slot\": \"36\"\n     *     },\n     *     \"fork_info\": {\n     *       \"fork\": {\n     *         \"current_version\": \"0x42424242\",\n     *         \"epoch\": \"0\",\n     *         \"previous_version\": \"0x42424242\"\n     *       },\n     *       \"genesis_validators_root\": \"0x9d13d61212c067e02ce8e608a7007e2c3b02571e9e6f27ff45dfa91bf27c870b\"\n     *     },\n     *     \"signingRoot\": \"0x9c57e77c4965727542b9337df6756f948464bca3859bea6ed3c0ec6600d8982a\",\n     *     \"type\": \"AGGREGATION_SLOT\"\n     *   },\n     *   \"network\": \"mainnet\"\n     * }\n     */\n    Eth2SignRequest: {\n      /**\n       * @description Subset of the Web3Signer Eth2 BLS signing request whose schema is defined\n       * [here](https://consensys.github.io/web3signer/web3signer-eth2.html#tag/Signing/operation/ETH2_SIGN).\n       * We handle deposits and voluntary exits separately.\n       */\n      eth2_sign_request: Record<string, never>;\n      network: components[\"schemas\"][\"Network\"];\n    };\n    Eth2SignResponse: {\n      /**\n       * @description Hex encoded signature prefixed with 0x e.g. \"0x0000...\"\n       * @example 0xb4f2ef9d12a54e1f569596c07c97d6d730535b6ffc0d287761dc78103a86326782471a04c75ce7a6faea08ca9a4a0830031cdcb893da8711d54aa22619f1a7e71b8185ddf4c6bfd9babbd735960e35e56bd6eeb89625b04850e7a9ef8846e549\n       */\n      signature: string;\n    };\n    /** @enum {string} */\n    EvmTxDepositErrorCode:\n      | \"EvmTxDepositReceiverMismatch\"\n      | \"EvmTxDepositEmptyData\"\n      | \"EvmTxDepositEmptyChainId\"\n      | \"EvmTxDepositEmptyReceiver\"\n      | \"EvmTxDepositUnexpectedValue\"\n      | \"EvmTxDepositUnexpectedDataLength\"\n      | \"EvmTxDepositNoAbi\"\n      | \"EvmTxDepositNoDepositFunction\"\n      | \"EvmTxDepositUnexpectedFunctionName\"\n      | \"EvmTxDepositUnexpectedValidatorKey\"\n      | \"EvmTxDepositInvalidValidatorKey\"\n      | \"EvmTxDepositMissingDepositArg\"\n      | \"EvmTxDepositWrongDepositArgType\"\n      | \"EvmTxDepositWrongValidatorArgValue\"\n      | \"EvmTxDepositValidatorKeyNotInRole\"\n      | \"EvmTxDepositUnexpectedWithdrawalCredentials\"\n      | \"EvmTxDepositUnresolvedRole\"\n      | \"EvmTxDepositInvalidDepositEncoding\";\n    /** @description Sent from the client to the server to answer a fido challenge */\n    FidoAssertAnswer: {\n      /** @description The ID of the challenge that was returned from the POST endpoint */\n      challenge_id: string;\n      credential: components[\"schemas\"][\"PublicKeyCredential\"];\n    };\n    FidoAssertChallenge: (components[\"schemas\"][\"ChallengePieces\"] & {\n      options: components[\"schemas\"][\"PublicKeyCredentialRequestOptions\"];\n    }) & {\n      /** @description The id of the challenge. Must be supplied when answering the challenge. */\n      challenge_id: string;\n    };\n    /** @description Sent from the client to the server to answer a fido challenge */\n    FidoCreateChallengeAnswer: {\n      /** @description The ID of the challenge that was returned from the POST endpoint */\n      challenge_id: string;\n      credential: components[\"schemas\"][\"PublicKeyCredential\"];\n    };\n    /**\n     * @description Sent by the server to the client. Contains the challenge data that must be\n     * used to generate a new credential\n     */\n    FidoCreateChallengeResponse: (components[\"schemas\"][\"ChallengePieces\"] & {\n      options: components[\"schemas\"][\"PublicKeyCredentialCreationOptions\"];\n    }) & {\n      /** @description The id of the challenge. Must be supplied when answering the challenge. */\n      challenge_id: string;\n    };\n    /** @description Declares intent to register a new FIDO key */\n    FidoCreateRequest: {\n      /**\n       * @description A human-readable name for the new fido credential\n       * @example Work Yubikey\n       */\n      name: string;\n    };\n    /** @enum {string} */\n    ForbiddenErrorCode:\n      | \"FidoRequiredToRemoveTotp\"\n      | \"MfaChallengeExpired\"\n      | \"ChainIdNotAllowed\"\n      | \"InvalidOrg\"\n      | \"SessionForWrongOrg\"\n      | \"OrgDisabled\"\n      | \"OrgNotFound\"\n      | \"OrgWithoutOwner\"\n      | \"OrphanedUser\"\n      | \"OidcUserNotFound\"\n      | \"UserNotInOrg\"\n      | \"UserNotOrgOwner\"\n      | \"UserNotKeyOwner\"\n      | \"InvalidRole\"\n      | \"DisabledRole\"\n      | \"KeyDisabled\"\n      | \"RoleNotInOrg\"\n      | \"KeyNotInRole\"\n      | \"KeyNotInOrg\"\n      | \"UserExportRequestNotInOrg\"\n      | \"UserExportRequestInvalid\"\n      | \"UserNotOriginalKeyOwner\"\n      | \"UserNotInRole\"\n      | \"MustBeFullMember\"\n      | \"SessionExpired\"\n      | \"SessionRevoked\"\n      | \"ExpectedUserSession\"\n      | \"SessionRoleChanged\"\n      | \"ScopedNameNotFound\"\n      | \"SessionInvalidEpochToken\"\n      | \"SessionInvalidRefreshToken\"\n      | \"SessionRefreshTokenExpired\"\n      | \"InvalidAuthHeader\"\n      | \"SessionNotFound\"\n      | \"InvalidArn\"\n      | \"SessionInvalidAuthToken\"\n      | \"SessionAuthTokenExpired\"\n      | \"SessionPossiblyStolenToken\"\n      | \"MfaDisallowedIdentity\"\n      | \"MfaDisallowedApprover\"\n      | \"MfaTypeNotAllowed\"\n      | \"MfaNotApprovedYet\"\n      | \"MfaConfirmationCodeMismatch\"\n      | \"MfaHttpRequestMismatch\"\n      | \"MfaRemoveBelowMin\"\n      | \"TotpAlreadyConfigured\"\n      | \"TotpConfigurationChanged\"\n      | \"MfaTotpBadConfiguration\"\n      | \"MfaTotpBadCode\"\n      | \"MfaTotpRateLimit\"\n      | \"ImproperSessionScope\"\n      | \"FullSessionRequired\"\n      | \"SessionWithoutAnyScopeUnder\"\n      | \"UserRoleUnprivileged\"\n      | \"MfaNotConfigured\";\n    /**\n     * @description Specifies a fork of the `BeaconChain`, to prevent replay attacks.\n     * The schema of `Fork` is defined in the [Beacon chain\n     * spec](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#fork).\n     * @example {\n     *   \"current_version\": \"0x00001020\",\n     *   \"epoch\": \"0\",\n     *   \"previous_version\": \"0x00001020\"\n     * }\n     */\n    Fork: {\n      /**\n       * @description Current fork version.\n       * @example 0x43434343\n       */\n      current_version: string;\n      epoch: components[\"schemas\"][\"Epoch\"];\n      /**\n       * @description Previous fork version.\n       * @example 0x42424242\n       */\n      previous_version: string;\n    };\n    /**\n     * @description Genesis data as defined in the [Beacon API\n     * spec](https://ethereum.github.io/beacon-APIs/#/Beacon/getGenesis).\n     * You can get the genesis data from the Beacon node's `/eth/v1/beacon/genesis` end-point.\n     * This struct definition is originally from lighthouse's eth2.\n     */\n    GenesisData: {\n      /**\n       * @description Genesis fork version.\n       * @example 0x42424242\n       */\n      genesis_fork_version: string;\n      /**\n       * @description Genesis time\n       * @example 1679326449\n       */\n      genesis_time: string;\n      /**\n       * @description Genesis validators root.\n       * @example 0x270d43e74ce340de4bca2b1936beca0f4f5408d9e78aec4850920baf659d5b69\n       */\n      genesis_validators_root: string;\n    };\n    GetKeysInOrgRequest: {\n      key_type?: components[\"schemas\"][\"KeyType\"] | null;\n    };\n    GetUsersInOrgResponse: {\n      /** @description The list of users in the org */\n      users: components[\"schemas\"][\"UserInOrgInfo\"][];\n    };\n    /** @description Stats pertaining the the sender `cube3signer` instance */\n    HeartbeatRequest: {\n      /**\n       * Format: int64\n       * @description Number of requests currently active (received but not necessarily being processed yet)\n       */\n      current_num_requests_active: number;\n      /**\n       * Format: int64\n       * @description Number of requests currently being processed by cube3signer\n       */\n      current_num_requests_processing: number;\n      /** @description Do not record metric data from this heartbeat */\n      ignore?: boolean;\n      /**\n       * Format: int64\n       * @description Number of new requests during this heartbeat period\n       */\n      num_requests: number;\n      /**\n       * Format: int64\n       * @description Number of requests that failed during this heartbeat period\n       */\n      num_requests_failed: number;\n      /**\n       * Format: int64\n       * @description Number of requests were retried during this heartbeat period\n       */\n      num_requests_retried: number;\n      /**\n       * Format: int64\n       * @description Number of retries during this heartbeat period\n       */\n      num_retries: number;\n      /**\n       * Format: int64\n       * @description Number of times auth token was refreshed during this heartbeat period\n       */\n      num_token_refreshes?: number;\n      /**\n       * Format: int64\n       * @description Number of times auth token refresh failed during this heartbeat period\n       */\n      num_token_refreshes_failed?: number;\n      /**\n       * @description Version of the proxy sending the heart beat request\n       *\n       * TODO: Make non-optional once we do not support proxies without version information\n       */\n      proxy_version?: string | null;\n    };\n    /**\n     * @description Information about the request.\n     *\n     * Captures all the relevant info (including the request body) about requests that require MFA.\n     * We use this to verify that when a request is resumed (after obtaining necessary MFA approvals)\n     * it is exactly the same as it originally was.\n     */\n    HttpRequest: {\n      /** @description HTTP request body */\n      body?: unknown;\n      /** @description HTTP method of the request */\n      method: string;\n      /** @description HTTP path of the request (including host or not?) */\n      path: string;\n    };\n    /**\n     * @description Proof that an end-user provided CubeSigner with a valid auth token\n     * (either an OIDC token or a CubeSigner session token)\n     */\n    IdentityProof: {\n      /**\n       * @description OIDC audience; set only if the proof was obtained by using OIDC token.\n       *\n       * In other words, presence of this field testifies that authorization was obtained via OIDC.\n       */\n      aud?: string | null;\n      /**\n       * @description The email associated with the user\n       * @example user@email.com\n       */\n      email?: string | null;\n      exp_epoch: components[\"schemas\"][\"EpochDateTime\"];\n      identity?: components[\"schemas\"][\"OIDCIdentity\"] | null;\n      /**\n       * @description The username (if any) associated with the user\n       * @example cubistdev\n       */\n      preferred_username?: string | null;\n      user_info?: components[\"schemas\"][\"CubeSignerUserInfo\"] | null;\n    } & {\n      /** @description An opaque identifier for the proof */\n      id: string;\n    };\n    ImportKeyRequest: components[\"schemas\"][\"KeyImportKey\"] & {\n      /** @description A set of encrypted keys to be imported */\n      key_material: components[\"schemas\"][\"ImportKeyRequestMaterial\"][];\n      key_type: components[\"schemas\"][\"KeyType\"];\n    };\n    ImportKeyRequestMaterial: {\n      /**\n       * @description The client's ephemeral public key used to derive a shared key.\n       * This is a base64-encoded, SEC1-encoded P384 public key.\n       */\n      client_public_key: string;\n      /**\n       * @description The encrypted keying material to be imported.\n       * This is a base64-encoded ciphertext.\n       */\n      ikm_enc: string;\n      /**\n       * @description A salt value used to derive a shared key.\n       * This is a base64-encoded byte string.\n       */\n      salt: string;\n    };\n    /** @enum {string} */\n    InternalErrorCode:\n      | \"SystemTimeError\"\n      | \"ReqwestError\"\n      | \"DbQueryError\"\n      | \"DbGetError\"\n      | \"DbDeleteError\"\n      | \"DbPutError\"\n      | \"DbUpdateError\"\n      | \"SerdeError\"\n      | \"TestAndSetError\"\n      | \"DbGetItemsError\"\n      | \"DbWriteError\"\n      | \"CubistSignerError\"\n      | \"CwPutMetricDataError\"\n      | \"KmsGenerateRandomError\"\n      | \"MalformedTotpBytes\"\n      | \"KmsGenerateRandomNoResponseError\"\n      | \"CreateKeyError\"\n      | \"ParseDerivationPathError\"\n      | \"SplitSignerError\"\n      | \"CreateImportKeyError\"\n      | \"CognitoDeleteUserError\"\n      | \"CognitoListUsersError\"\n      | \"CognitoGetUserError\"\n      | \"MissingUserEmail\"\n      | \"CognitoResendUserInvitation\"\n      | \"CognitoSetUserPasswordError\"\n      | \"GenericInternalError\"\n      | \"OidcAuthWithoutOrg\"\n      | \"MissingKeyMetadata\"\n      | \"KmsKeyWithoutId\"\n      | \"KmsEnableKeyError\"\n      | \"KmsDisableKeyError\"\n      | \"SerializeEncryptedExportKeyError\"\n      | \"DeserializeEncryptedExportKeyError\"\n      | \"ReEncryptUserExport\"\n      | \"S3UploadError\"\n      | \"S3DownloadError\"\n      | \"ManagedStateMissing\"\n      | \"InternalHeaderMissing\"\n      | \"InvalidInternalHeaderValue\"\n      | \"RequestLocalStateAlreadySet\"\n      | \"OidcOrgMismatch\"\n      | \"OrphanedRoleKeyId\"\n      | \"OidcIssuerJwkEndpointUnavailable\"\n      | \"OidcIssuerInvalidJwk\"\n      | \"InvalidPkForMaterialId\"\n      | \"UncheckedOrg\"\n      | \"AvaSignCredsMissing\"\n      | \"AvaSignSignatureMissing\"\n      | \"ExpectedRoleSession\"\n      | \"InvalidThirdPartyIdentity\"\n      | \"CognitoGetUser\"\n      | \"SnsSubscribeError\"\n      | \"SnsUnsubscribeError\"\n      | \"SnsPublishBatchError\";\n    InviteRequest: {\n      /**\n       * @description The user's email address\n       * @example alice@acme.com\n       */\n      email: string;\n      /** @description Optional login MFA policy */\n      mfa_policy?: unknown;\n      /**\n       * @description The user's full name\n       * @example Alice Wonderland\n       */\n      name: string;\n      role?: components[\"schemas\"][\"MemberRole\"] | null;\n      /**\n       * @description Skip sending an invitation email to this user if true.\n       *\n       * NOTE: this field is for internal testing use ONLY. If you do not\n       * send an invitation email, the user will never be able to log in.\n       * @example false\n       */\n      skip_email: boolean;\n    };\n    /**\n     * @description A [`KeyPackage`] serialized into a format that gives a tidier JSON\n     * representation suitable for encryption in the user-export flow.\n     *\n     * We construct values of this type rather than constructing `serde_json::Value`s\n     * directly with `json!()` because this allows us to zeroize values on drop, which\n     * doesn't work with `serde_json::Value`.\n     *\n     * Examples of serialized material:\n     *\n     * - `JsonKeyMaterial::EnglishMnemonic`:\n     *\n     * ```\n     * use cubist_signer_utils::{\n     * DerivationPath, KeyPackage, Mnemonic, MnemonicPackage, Secp256k1Pkg,\n     * };\n     * use serde_json::json;\n     *\n     * const MNEMONIC: &str = \"deposit fiscal brain swarm surround cousin horn glare fix love render believe guide shuffle stem cram broccoli resemble beach artefact language gift jar permit\";\n     * const DER_PATH: &str = \"m/44'/60'/0'/0/0\";\n     * const KEY_TYPE: &str = \"ecdsa:secp256k1\";\n     *\n     * let mne = Mnemonic::try_from(MNEMONIC).expect(\"good mnemonic\");\n     * let derp = DerivationPath::try_from(DER_PATH).expect(\"good der path\");\n     * let mne_pkg = MnemonicPackage::new(mne, \"\", derp);\n     * let key_pkg = KeyPackage::<Secp256k1Pkg>::EnglishMnemonic(mne_pkg);\n     * let json_pkg = key_pkg.into_json(KEY_TYPE);\n     *\n     * let json_expect = json!({\n     * \"key_type\": KEY_TYPE,\n     * \"material_type\": \"english_mnemonic\",\n     * \"mnemonic\": MNEMONIC,\n     * \"password\": \"\",\n     * \"derivation_path\": DER_PATH,\n     * });\n     *\n     * assert_eq!(\n     * serde_json::to_value(&json_pkg).expect(\"json serialization\"),\n     * json_expect,\n     * );\n     * ```\n     *\n     * - `JsonKeyMaterial::RawSecret`:\n     *\n     * ```\n     * use cubist_signer_utils::{\n     * get_random_byte_array, hex_encode, KeyPackage, RngCore, Secp256k1Pkg,\n     * };\n     * use serde_json::json;\n     *\n     * const KEY_TYPE: &str = \"ecdsa:secp256k1\";\n     *\n     * // random 32-byte secret\n     * let sk: [u8; 32] = *get_random_byte_array();\n     *\n     * let key_pkg = KeyPackage::<Secp256k1Pkg>::Secret(sk);\n     * let json_pkg = key_pkg.into_json(KEY_TYPE);\n     *\n     * let json_expect = json!({\n     * \"key_type\": KEY_TYPE,\n     * \"material_type\": \"raw_secret\",\n     * \"secret\": hex_encode(&sk),\n     * });\n     *\n     * assert_eq!(\n     * serde_json::to_value(&json_pkg).expect(\"json serialization\"),\n     * json_expect,\n     * );\n     * ```\n     */\n    JsonKeyPackage: (\n      | {\n          /** @enum {string} */\n          material_type: \"raw_secret\";\n          /** @description The value of the raw secret */\n          secret: string;\n        }\n      | {\n          /** @description The derivation path */\n          derivation_path: string;\n          /** @enum {string} */\n          material_type: \"english_mnemonic\";\n          /** @description The mnemonic */\n          mnemonic: string;\n          /** @description The password (which may be empty) */\n          password: string;\n        }\n    ) & {\n      /** @description The type of key this package represents */\n      key_type: string;\n    };\n    /** @description Derivation-related metadata for keys derived from a long-lived mnemonic */\n    KeyDerivationInfo: {\n      /** @description The derivation path used to derive this key */\n      derivation_path: string;\n      /** @description The mnemonic-id of the key's parent mnemonic */\n      mnemonic_id: string;\n    };\n    /** @description A wrapped key-import key */\n    KeyImportKey: {\n      /** @description Base64-encoded, encrypted data key. */\n      dk_enc: string;\n      /**\n       * Format: int64\n       * @description Expiration timestamp expressed as seconds since the UNIX epoch.\n       */\n      expires: number;\n      /**\n       * @description The ephemeral public key to which an imported key should be encrypted.\n       * This is a P384 public key in base64-encoded uncompressed SECG format.\n       */\n      public_key: string;\n      /** @description Base64-encoded, encrypted secret key. */\n      sk_enc: string;\n    };\n    KeyInRoleInfo: {\n      /**\n       * @description Key ID\n       * @example Key#0x8e3484687e66cdd26cf04c3647633ab4f3570148\n       */\n      key_id: string;\n      /**\n       * @description Policies that are checked before this key is used on behalf of this role\n       * @example [\n       *   {\n       *     \"TxReceiver\": \"0x8c594691c0e592ffa21f153a16ae41db5befcaaa\"\n       *   },\n       *   {\n       *     \"TxDeposit\": {\n       *       \"kind\": \"Canonical\"\n       *     }\n       *   }\n       * ]\n       */\n      policy?: Record<string, never>[];\n      /**\n       * @description Role ID\n       * @example Role#e427c28a-9c5b-49cc-a257-878aea58a22c\n       */\n      role_id: string;\n    };\n    KeyInfo: {\n      derivation_info?: components[\"schemas\"][\"KeyDerivationInfo\"] | null;\n      /** @description Whether the key is enabled (only enabled keys may be used for signing) */\n      enabled: boolean;\n      /**\n       * @description The id of the key: \"Key#\" followed by a unique identifier specific to\n       * the type of key (such as a public key for BLS or an ethereum address for Secp)\n       * @example Key#0x8e3484687e66cdd26cf04c3647633ab4f3570148\n       */\n      key_id: string;\n      key_type: components[\"schemas\"][\"KeyType\"];\n      /**\n       * @description A unique identifier specific to the type of key, such as a public key or an ethereum address\n       * @example 0x8e3484687e66cdd26cf04c3647633ab4f3570148\n       */\n      material_id: string;\n      /**\n       * @description User-defined metadata. When rendering (e.g., in the browser) you should treat\n       * it as untrusted user data (and avoid injecting metadata into HTML directly) if\n       * untrusted users can create/update keys (or their metadata).\n       */\n      metadata?: string;\n      /**\n       * @description Owner of the key\n       * @example User#c3b9379c-4e8c-4216-bd0a-65ace53cf98f\n       */\n      owner: string;\n      /**\n       * @description Key policy\n       * @example [\n       *   \"AllowRawBlobSigning\",\n       *   {\n       *     \"RequireMfa\": {\n       *       \"count\": 1\n       *     }\n       *   }\n       * ]\n       */\n      policy: Record<string, never>[];\n      /**\n       * @description Hex-encoded, serialized public key. The format used depends on the key type:\n       * - Secp256k1 keys use 65-byte uncompressed SECG format;\n       * - Stark keys use 33-byte compressed SECG format;\n       * - BLS keys use 48-byte compressed BLS12-381 (ZCash) format;\n       * - Ed25519 keys use the canonical 32-byte encoding specified in RFC 8032.\n       * @example 0x04d2688b6bc2ce7f9879b9e745f3c4dc177908c5cef0c1b64cff19ae7ff27dee623c64fe9d9c325c7fbbc748bbd5f607ce14dd83e28ebbbb7d3e7f2ffb70a79431\n       */\n      public_key: string;\n      /**\n       * @description The purpose for which the key can be used (e.g., chain id for which the key is allowed to sign messages)\n       * @example Eth2Validator(1)\n       */\n      purpose: string;\n    };\n    KeyInfos: {\n      keys: components[\"schemas\"][\"KeyInfo\"][];\n    };\n    /** @enum {string} */\n    KeyType:\n      | \"SecpEthAddr\"\n      | \"SecpBtc\"\n      | \"SecpBtcTest\"\n      | \"SecpAvaAddr\"\n      | \"SecpAvaTestAddr\"\n      | \"BlsPub\"\n      | \"BlsInactive\"\n      | \"Ed25519SolanaAddr\"\n      | \"Ed25519SuiAddr\"\n      | \"Ed25519AptosAddr\"\n      | \"Ed25519CardanoAddrVk\"\n      | \"Ed25519StellarAddr\"\n      | \"Mnemonic\"\n      | \"Stark\";\n    /**\n     * @description Wrapper around encrypted [UnencryptedLastEvalKey] bytes.\n     *\n     * We serialize this into a base64url-encoded string and return to the user\n     * so that they can pass this back to us as a url query parameter.\n     */\n    LastEvalKey: string;\n    ListMfaResponse: {\n      /** @description All pending MFA requests */\n      mfa_requests: components[\"schemas\"][\"MfaRequestInfo\"][];\n    };\n    ListTokensResponse: {\n      tokens: components[\"schemas\"][\"TokenInfo\"][];\n    };\n    /**\n     * @description Describes whether a user in an org is an Owner or just a regular member\n     * @enum {string}\n     */\n    MemberRole: \"Alien\" | \"Member\" | \"Owner\";\n    /** @description Returned as a response from multiple routes (e.g., 'get mfa', 'approve mfa', 'approve totp'). */\n    MfaRequestInfo: {\n      expires_at: components[\"schemas\"][\"EpochDateTime\"];\n      /** @description Approval request ID. */\n      id: string;\n      receipt?: components[\"schemas\"][\"Receipt\"] | null;\n      request: components[\"schemas\"][\"HttpRequest\"];\n      status: components[\"schemas\"][\"Status\"];\n    };\n    MfaType: OneOf<\n      [\n        \"CubeSigner\",\n        \"Totp\",\n        \"Fido\",\n        {\n          /** @description Answer a FIDO challenge with a specific FIDO key */\n          FidoKey: {\n            /**\n             * @description The ID of the FIDO key that must be use to approve the request\n             * @example FidoKey#EtDd...ZZc8=\n             */\n            key_id: string;\n          };\n        },\n      ]\n    >;\n    /** @enum {string} */\n    MfaVote: \"approve\" | \"reject\";\n    /**\n     * @description Network name ('mainnet', 'prater', 'goerli')\n     * @example goerli\n     * @enum {string}\n     */\n    Network: \"mainnet\" | \"prater\" | \"goerli\" | \"holesky\";\n    /** @description Information about a new session, returned from multiple endpoints (e.g., login, refresh, etc.). */\n    NewSessionResponse: {\n      /**\n       * Format: int64\n       * @description Session expiration (in seconds since UNIX epoch), beyond which it cannot be refreshed.\n       * @example 1701879640\n       */\n      expiration?: number;\n      session_info: components[\"schemas\"][\"ClientSessionInfo\"];\n      /**\n       * @description New token to be used for authentication. Requests to signing endpoints\n       * should include this value in the `Authorization` header\n       */\n      token: string;\n    };\n    /** @enum {string} */\n    NotFoundErrorCode:\n      | \"UriSegmentMissing\"\n      | \"UriSegmentInvalid\"\n      | \"TotpNotConfigured\"\n      | \"FidoKeyNotFound\"\n      | \"FidoChallengeNotFound\"\n      | \"TotpChallengeNotFound\"\n      | \"UserExportRequestNotFound\"\n      | \"UserExportCiphertextNotFound\";\n    /** @description The configuration for an org event endpoint */\n    NotificationEndpointConfiguration: {\n      filter?: components[\"schemas\"][\"OrgEventFilter\"];\n      /** @description URL of the endpoint */\n      url: string;\n    };\n    /**\n     * @description Represents a globally unique OIDC-authorized user by expressing the full \"path\" to a user. That is:\n     *\n     * (iss)       (sub)\n     * Issuer -> Subresource\n     */\n    OIDCIdentity: {\n      /**\n       * @description The root-level issuer who administrates this user. Frome the OIDC spec:\n       * Issuer Identifier for the Issuer of the response. The iss\n       * value is a case sensitive URL using the https scheme that contains\n       * scheme, host, and optionally, port number and path components and\n       * no query or fragment components.\n       * @example https://accounts.google.com\n       */\n      iss: string;\n      /**\n       * @description From the OIDC spec:\n       *\n       * A locally unique and never reassigned identifier within the Issuer for\n       * the End-User, which is intended to be consumed by the Client, e.g.,\n       * 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4. It MUST NOT exceed\n       * 255 ASCII characters in length. The sub value is a case sensitive\n       * string.\n       * @example 10769150350006150715113082367\n       */\n      sub: string;\n    };\n    OidcLoginRequest: {\n      /** @description A human readable description of the purpose of the session */\n      purpose?: string | null;\n      /**\n       * @description Controls what capabilities this session will have.\n       * @example [\n       *   \"sign:*\"\n       * ]\n       */\n      scopes: string[];\n      tokens?: components[\"schemas\"][\"RatchetConfig\"];\n    };\n    /**\n     * @description Auto-generated discriminant enum variants\n     * @enum {string}\n     */\n    OrgEventDiscriminants:\n      | \"OidcAuth\"\n      | \"Eth2ConcurrentAttestationSigning\"\n      | \"Eth2ConcurrentBlockSigning\"\n      | \"Eth2InvalidBlockProposerSlotTooLow\"\n      | \"Eth2InvalidAttestationSourceEpochTooLow\"\n      | \"Eth2InvalidAttestationTargetEpochTooLow\"\n      | \"Eth2Unstake\"\n      | \"Eth2ExceededMaxUnstake\"\n      | \"MfaRejected\";\n    /** @description Filter for org events */\n    OrgEventFilter: OneOf<\n      [\n        \"All\",\n        {\n          /** @description Only accepts org events that are one of the listed events */\n          OneOf: components[\"schemas\"][\"OrgEventDiscriminants\"][];\n        },\n      ]\n    >;\n    OrgInfo: {\n      /** @description When false, all cryptographic operations involving keys in this org are disabled. */\n      enabled: boolean;\n      /** @description Deprecated: this field should be ignored. */\n      key_import_key?: string | null;\n      /**\n       * @description The organization's universally unique key-wrapping-key identifier.\n       * This value is required when setting up key export.\n       * @example mrk-fce09525e81587d23520f11e07e2e9d9\n       */\n      kwk_id: string;\n      /**\n       * @description Date/time (in UTC) when last 'unstake' was performed. Unix epoch if none.\n       * @example TODO\n       */\n      last_unstake: string;\n      /**\n       * Format: int32\n       * @description How many 'unstake' calls happened on the day when `last_unstake` was performed.\n       */\n      last_unstake_day_count: number;\n      /**\n       * @description The human-readable name for the org\n       * @example my_org_name\n       */\n      name?: string | null;\n      /**\n       * @description The organization's notification endpoints, which are HTTPS URLs are notified about a\n       * configurable set of events in an organization. For each event, CubeSigner sends a POST\n       * request with a JSON-formatted body that contains the event details.\n       * @example [\n       *   {\n       *     \"url\": \"https://example.com/endpoint\"\n       *   }\n       * ]\n       */\n      notification_endpoints?: Record<string, never>[];\n      /**\n       * @description The ID of the organization\n       * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n       */\n      org_id: string;\n      /**\n       * @description Org-wide policies that are checked before a key is used for signing\n       * @example [\n       *   {\n       *     \"MaxDailyUnstake\": 5\n       *   }\n       * ]\n       */\n      policy?: Record<string, never>[];\n      /**\n       * Format: int32\n       * @description The organization's currently configured TOTP failure limit, i.e., the number\n       * of times a user can provide an incorrect TOTP code before being rate limited.\n       * This value can be between 1 and 5 (inclusive).\n       */\n      totp_failure_limit: number;\n      /**\n       * Format: int64\n       * @description The organization's currently configured user-export delay, i.e., the minimum\n       * amount of time (in seconds) between when a user-export is initiated and when\n       * it may be completed. (This value is meaningless for organizations that use\n       * org-wide export.)\n       */\n      user_export_delay: number;\n      /**\n       * Format: int64\n       * @description The organization's currently configured user-export window, i.e., the amount\n       * of time (in seconds) between when the user-export delay is completed and when\n       * the user export request has expired and can no longer be completed. (This value\n       * is meaningless for organizations that use org-wide export.)\n       */\n      user_export_window: number;\n    };\n    /**\n     * @description The rocket query parameter representing the page from which to start a paginated query.\n     *\n     * MUST be named `<page>` in rocket url spec so that 'serde(rename = \"page.*\")' below continues to work\n     */\n    Page: {\n      /**\n       * Format: int32\n       * @description Max number of items to return per page.\n       *\n       * If the actual number of returned items may be less that this, even if there exist more\n       * data in the result set. To reliably determine if more data is left in the result set,\n       * inspect the [UnencryptedLastEvalKey] value in the response object.\n       */\n      \"page.size\"?: number;\n      /**\n       * @description The start of the page.  Omit to start from the beginning; otherwise, only specify a\n       * the exact value previously returned as 'last_evaluated_key' from the same endpoint.\n       */\n      \"page.start\"?: string | null;\n    };\n    /**\n     * @description Response type that wraps another type and adds base64url-encoded encrypted `last_evaluated_key`\n     * value (which can the user pass back to use as a url query parameter to continue pagination).\n     */\n    PaginatedListKeyRolesResponse: {\n      /** @description All roles the key is in */\n      roles: components[\"schemas\"][\"KeyInRoleInfo\"][];\n    } & {\n      /**\n       * @description If set, the content of `response` does not contain the entire result set.\n       * To fetch the next page of the result set, call the same endpoint\n       * but specify this value as the 'page.start' query parameter.\n       */\n      last_evaluated_key?: string | null;\n    };\n    /**\n     * @description Response type that wraps another type and adds base64url-encoded encrypted `last_evaluated_key`\n     * value (which can the user pass back to use as a url query parameter to continue pagination).\n     */\n    PaginatedListKeysResponse: {\n      keys: components[\"schemas\"][\"KeyInfo\"][];\n    } & {\n      /**\n       * @description If set, the content of `response` does not contain the entire result set.\n       * To fetch the next page of the result set, call the same endpoint\n       * but specify this value as the 'page.start' query parameter.\n       */\n      last_evaluated_key?: string | null;\n    };\n    /**\n     * @description Response type that wraps another type and adds base64url-encoded encrypted `last_evaluated_key`\n     * value (which can the user pass back to use as a url query parameter to continue pagination).\n     */\n    PaginatedListRoleKeysResponse: {\n      /** @description All keys in a role */\n      keys: components[\"schemas\"][\"KeyInRoleInfo\"][];\n    } & {\n      /**\n       * @description If set, the content of `response` does not contain the entire result set.\n       * To fetch the next page of the result set, call the same endpoint\n       * but specify this value as the 'page.start' query parameter.\n       */\n      last_evaluated_key?: string | null;\n    };\n    /**\n     * @description Response type that wraps another type and adds base64url-encoded encrypted `last_evaluated_key`\n     * value (which can the user pass back to use as a url query parameter to continue pagination).\n     */\n    PaginatedListRoleUsersResponse: {\n      /** @description All users in a role */\n      users: components[\"schemas\"][\"UserInRoleInfo\"][];\n    } & {\n      /**\n       * @description If set, the content of `response` does not contain the entire result set.\n       * To fetch the next page of the result set, call the same endpoint\n       * but specify this value as the 'page.start' query parameter.\n       */\n      last_evaluated_key?: string | null;\n    };\n    /**\n     * @description Response type that wraps another type and adds base64url-encoded encrypted `last_evaluated_key`\n     * value (which can the user pass back to use as a url query parameter to continue pagination).\n     */\n    PaginatedListRolesResponse: {\n      /** @description All roles in an organization. */\n      roles: components[\"schemas\"][\"RoleInfo\"][];\n    } & {\n      /**\n       * @description If set, the content of `response` does not contain the entire result set.\n       * To fetch the next page of the result set, call the same endpoint\n       * but specify this value as the 'page.start' query parameter.\n       */\n      last_evaluated_key?: string | null;\n    };\n    /**\n     * @description Response type that wraps another type and adds base64url-encoded encrypted `last_evaluated_key`\n     * value (which can the user pass back to use as a url query parameter to continue pagination).\n     */\n    PaginatedSessionsResponse: {\n      /** @description The list of sessions */\n      sessions: components[\"schemas\"][\"SessionInfo\"][];\n    } & {\n      /**\n       * @description If set, the content of `response` does not contain the entire result set.\n       * To fetch the next page of the result set, call the same endpoint\n       * but specify this value as the 'page.start' query parameter.\n       */\n      last_evaluated_key?: string | null;\n    };\n    /**\n     * @description Response type that wraps another type and adds base64url-encoded encrypted `last_evaluated_key`\n     * value (which can the user pass back to use as a url query parameter to continue pagination).\n     */\n    PaginatedUserExportListResponse: {\n      export_requests: components[\"schemas\"][\"UserExportInitResponse\"][];\n    } & {\n      /**\n       * @description If set, the content of `response` does not contain the entire result set.\n       * To fetch the next page of the result set, call the same endpoint\n       * but specify this value as the 'page.start' query parameter.\n       */\n      last_evaluated_key?: string | null;\n    };\n    PolicyErrorCode:\n      | components[\"schemas\"][\"PolicyErrorOwnCodes\"]\n      | components[\"schemas\"][\"EvmTxDepositErrorCode\"];\n    /** @enum {string} */\n    PolicyErrorOwnCodes:\n      | \"EvmTxReceiverMismatch\"\n      | \"EvmTxSenderMismatch\"\n      | \"PolicyDisjunctionError\"\n      | \"PolicyNegationError\"\n      | \"Eth2ExceededMaxUnstake\"\n      | \"Eth2ConcurrentUnstaking\"\n      | \"NotInIpv4Allowlist\"\n      | \"NotInOriginAllowlist\"\n      | \"InvalidSourceIp\"\n      | \"RawSigningNotAllowed\"\n      | \"Eip712SigningNotAllowed\"\n      | \"OidcSourceNotAllowed\"\n      | \"NoOidcAuthSourcesDefined\"\n      | \"AddKeyToRoleDisallowed\"\n      | \"KeysAlreadyInRole\"\n      | \"KeyInMultipleRoles\"\n      | \"KeyAccessError\"\n      | \"Eip191SigningNotAllowed\";\n    PreconditionErrorCode:\n      | components[\"schemas\"][\"PreconditionErrorOwnCodes\"]\n      | components[\"schemas\"][\"PolicyErrorCode\"];\n    /** @enum {string} */\n    PreconditionErrorOwnCodes:\n      | \"Eth2ProposerSlotTooLow\"\n      | \"Eth2AttestationSourceEpochTooLow\"\n      | \"Eth2AttestationTargetEpochTooLow\"\n      | \"Eth2ConcurrentBlockSigning\"\n      | \"Eth2ConcurrentAttestationSigning\"\n      | \"Eth2MultiDepositToNonGeneratedKey\"\n      | \"Eth2MultiDepositUnknownInitialDeposit\"\n      | \"Eth2MultiDepositWithdrawalAddressMismatch\";\n    /**\n     * @description This type represents a wire-encodable form of the PublicKeyCredential interface\n     * Clients may need to manually encode into this format to communicate with the server\n     *\n     * The PublicKeyCredential interface inherits from Credential\n     * [CREDENTIAL-MANAGEMENT-1], and contains the attributes that are returned to\n     * the caller when a new credential is created, or a new assertion is\n     * requested.\n     *\n     * https://www.w3.org/TR/webauthn-2/#iface-pkcredential\n     */\n    PublicKeyCredential: {\n      /**\n       * @description This internal slot contains the results of processing client extensions\n       * requested by the Relying Party upon the Relying Party's invocation of\n       * either navigator.credentials.create() or navigator.credentials.get().\n       *\n       * https://www.w3.org/TR/webauthn-2/#dom-publickeycredential-clientextensionsresults-slot\n       *\n       * IMPLEMENTATION NOTE: The type for this field comes from the type of getClientExtensionResults() which as the following doc:\n       *\n       * This operation returns the value of [[clientExtensionsResults]], which is a map containing extension identifier → client extension output entries produced by the extension’s client extension processing.\n       * https://www.w3.org/TR/webauthn-2/#ref-for-dom-publickeycredential-getclientextensionresults\n       */\n      clientExtensionResults?: unknown;\n      /**\n       * @description This internal slot contains the credential ID, chosen by the\n       * authenticator. The credential ID is used to look up credentials for use,\n       * and is therefore expected to be globally unique with high probability\n       * across all credentials of the same type, across all authenticators.\n       *\n       * https://www.w3.org/TR/webauthn-2/#dom-publickeycredential-identifier-slot\n       */\n      id: string;\n      /** @description Authenticators respond to Relying Party requests by returning an object derived from the AuthenticatorResponse interface */\n      response:\n        | components[\"schemas\"][\"AuthenticatorAttestationResponse\"]\n        | components[\"schemas\"][\"AuthenticatorAssertionResponse\"];\n    };\n    /**\n     * @description Defines the parameters for the creation of a new public key credential\n     *\n     * https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialcreationoptions\n     */\n    PublicKeyCredentialCreationOptions: {\n      attestation?: components[\"schemas\"][\"AttestationConveyancePreference\"];\n      authenticatorSelection?: components[\"schemas\"][\"AuthenticatorSelectionCriteria\"] | null;\n      /**\n       * @description This member contains a challenge intended to be used for generating the\n       * newly created credential’s attestation object. See the § 13.4.3\n       * Cryptographic Challenges security consideration.\n       *\n       * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialcreationoptions-challenge\n       */\n      challenge: string;\n      /**\n       * @description This member is intended for use by Relying Parties that wish to limit\n       * the creation of multiple credentials for the same account on a single\n       * authenticator. The client is requested to return an error if the new\n       * credential would be created on an authenticator that also contains one\n       * of the credentials enumerated in this parameter.\n       *\n       * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialcreationoptions-excludecredentials\n       */\n      excludeCredentials?: components[\"schemas\"][\"PublicKeyCredentialDescriptor\"][];\n      /**\n       * @description This member contains additional parameters requesting additional\n       * processing by the client and authenticator. For example, the caller may\n       * request that only authenticators with certain capabilities be used to\n       * create the credential, or that particular information be returned in the\n       * attestation object. Some extensions are defined in § 9 WebAuthn\n       * Extensions; consult the IANA \"WebAuthn Extension Identifiers\" registry\n       * [IANA-WebAuthn-Registries] established by [RFC8809] for an up-to-date\n       * list of registered WebAuthn Extensions.\n       *\n       * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialcreationoptions-extensions\n       */\n      extensions?: unknown;\n      /**\n       * @description This member contains information about the desired properties of the\n       * credential to be created. The sequence is ordered from most preferred to\n       * least preferred. The client makes a best-effort to create the most\n       * preferred credential that it can.\n       *\n       * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialcreationoptions-pubkeycredparams\n       */\n      pubKeyCredParams: components[\"schemas\"][\"PublicKeyCredentialParameters\"][];\n      rp: components[\"schemas\"][\"PublicKeyCredentialRpEntity\"];\n      /**\n       * Format: int32\n       * @description This member specifies a time, in milliseconds, that the caller is\n       * willing to wait for the call to complete. This is treated as a hint, and\n       * MAY be overridden by the client.\n       *\n       * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialcreationoptions-timeout\n       */\n      timeout?: number | null;\n      user: components[\"schemas\"][\"PublicKeyCredentialUserEntity\"];\n    };\n    /**\n     * @description This dictionary contains the attributes that are specified by a caller when\n     * referring to a public key credential as an input parameter to the create()\n     * or get() methods. It mirrors the fields of the PublicKeyCredential object\n     * returned by the latter methods.\n     *\n     * https://www.w3.org/TR/webauthn-2/#dictionary-credential-descriptor\n     */\n    PublicKeyCredentialDescriptor: {\n      /**\n       * @description This member contains the credential ID of the public key credential the caller is referring to.\n       *\n       * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialdescriptor-id\n       */\n      id: string;\n      /**\n       * @description This OPTIONAL member contains a hint as to how the client might\n       * communicate with the managing authenticator of the public key credential\n       * the caller is referring to. The values SHOULD be members of\n       * AuthenticatorTransport but client platforms MUST ignore unknown values.\n       *\n       * The getTransports() operation can provide suitable values for this\n       * member. When registering a new credential, the Relying Party SHOULD\n       * store the value returned from getTransports(). When creating a\n       * PublicKeyCredentialDescriptor for that credential, the Relying Party\n       * SHOULD retrieve that stored value and set it as the value of the\n       * transports member.\n       */\n      transports?: components[\"schemas\"][\"AuthenticatorTransport\"][] | null;\n      type: components[\"schemas\"][\"PublicKeyCredentialType\"];\n    };\n    /**\n     * @description This dictionary is used to supply additional parameters when creating a new\n     * credential.\n     *\n     * https://www.w3.org/TR/webauthn-2/#dictionary-credential-params\n     */\n    PublicKeyCredentialParameters: {\n      /**\n       * Format: int64\n       * @description This member specifies the cryptographic signature algorithm with which\n       * the newly generated credential will be used, and thus also the type of\n       * asymmetric key pair to be generated, e.g., RSA or Elliptic Curve.\n       */\n      alg: number;\n      type: components[\"schemas\"][\"PublicKeyCredentialType\"];\n    };\n    /**\n     * @description The `PublicKeyCredentialRequestOptions` dictionary supplies get() with the\n     * data it needs to generate an assertion. Its challenge member MUST be\n     * present, while its other members are OPTIONAL.\n     *\n     * This struct is also used as part of the verification procedure for assertions\n     */\n    PublicKeyCredentialRequestOptions: {\n      /**\n       * @description This OPTIONAL member contains a list of PublicKeyCredentialDescriptor\n       * objects representing public key credentials acceptable to the caller, in\n       * descending order of the caller’s preference (the first item in the list\n       * is the most preferred credential, and so on down the list).\n       *\n       * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialrequestoptions-allowcredentials\n       */\n      allowCredentials?: components[\"schemas\"][\"PublicKeyCredentialDescriptor\"][];\n      /**\n       * @description This member represents a challenge that the selected authenticator\n       * signs, along with other data, when producing an authentication\n       * assertion.\n       *\n       * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialrequestoptions-challenge\n       */\n      challenge: string;\n      extensions?: unknown;\n      /**\n       * @description This OPTIONAL member specifies the relying party identifier claimed by\n       * the caller. If omitted, its value will be the CredentialsContainer\n       * object’s relevant settings object's origin's effective domain.\n       *\n       * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialrequestoptions-rpid\n       */\n      rpId?: string | null;\n      /**\n       * Format: int32\n       * @description This OPTIONAL member specifies a time, in milliseconds, that the caller\n       * is willing to wait for the call to complete. The value is treated as a\n       * hint, and MAY be overridden by the client.\n       *\n       * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialrequestoptions-timeout\n       */\n      timeout?: number | null;\n      userVerification?: components[\"schemas\"][\"UserVerificationRequirement\"];\n    };\n    /**\n     * @description The PublicKeyCredentialRpEntity dictionary is used to supply additional\n     * Relying Party attributes when creating a new credential.\n     *\n     * https://www.w3.org/TR/webauthn-2/#dictionary-rp-credential-params\n     */\n    PublicKeyCredentialRpEntity: {\n      /**\n       * @description A unique identifier for the Relying Party entity, which sets the RP ID.\n       *\n       * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialrpentity-id\n       */\n      id?: string | null;\n      /**\n       * @description A human-palatable name for the entity. Its function depends on what the\n       * PublicKeyCredentialEntity represents: When inherited by\n       * PublicKeyCredentialRpEntity it is a human-palatable identifier for the\n       * Relying Party, intended only for display. For example, \"ACME\n       * Corporation\", \"Wonderful Widgets, Inc.\" or \"ОАО Примертех\".\n       *\n       * Relying Parties SHOULD perform enforcement, as prescribed in Section 2.3\n       * of [RFC8266] for the Nickname Profile of the PRECIS FreeformClass\n       * [RFC8264], when setting name's value, or displaying the value to the\n       * user.\n       *\n       * This string MAY contain language and direction metadata. Relying Parties\n       * SHOULD consider providing this information. See § 6.4.2 Language and\n       * Direction Encoding about how this metadata is encoded.\n       */\n      name: string;\n    };\n    /**\n     * @description This enumeration defines the valid credential types. It is an extension\n     * point; values can be added to it in the future, as more credential types are\n     * defined. The values of this enumeration are used for versioning the\n     * Authentication Assertion and attestation structures according to the type of\n     * the authenticator.  Currently one credential type is defined, namely\n     * \"public-key\".\n     *\n     * https://www.w3.org/TR/webauthn-2/#enumdef-publickeycredentialtype\n     * @enum {string}\n     */\n    PublicKeyCredentialType: \"public-key\";\n    /**\n     * @description The PublicKeyCredentialUserEntity dictionary is used to supply additional\n     * user account attributes when creating a new credential.\n     */\n    PublicKeyCredentialUserEntity: {\n      /**\n       * @description A human-palatable name for the user account, intended only for display.\n       * For example, \"Alex Müller\" or \"田中倫\". The Relying Party SHOULD let the\n       * user choose this, and SHOULD NOT restrict the choice more than\n       * necessary.\n       *\n       * Relying Parties SHOULD perform enforcement, as prescribed in Section 2.3\n       * of [RFC8266] for the Nickname Profile of the PRECIS FreeformClass\n       * [RFC8264], when setting displayName's value, or displaying the value to\n       * the user.\n       *\n       * This string MAY contain language and direction metadata. Relying Parties\n       * SHOULD consider providing this information. See § 6.4.2 Language and\n       * Direction Encoding about how this metadata is encoded.\n       *\n       * Clients SHOULD perform enforcement, as prescribed in Section 2.3 of\n       * [RFC8266] for the Nickname Profile of the PRECIS FreeformClass\n       * [RFC8264], on displayName's value prior to displaying the value to the\n       * user or including the value as a parameter of the\n       * authenticatorMakeCredential operation.\n       *\n       * When clients, client platforms, or authenticators display a\n       * displayName's value, they should always use UI elements to provide a\n       * clear boundary around the displayed value, and not allow overflow into\n       * other elements [css-overflow-3].\n       *\n       * Authenticators MUST accept and store a 64-byte minimum length for a\n       * displayName member’s value. Authenticators MAY truncate a displayName\n       * member’s value so that it fits within 64 bytes. See § 6.4.1 String\n       * Truncation about truncation and other considerations.\n       *\n       * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialuserentity-displayname\n       */\n      displayName: string;\n      /**\n       * @description The user handle of the user account entity. A user handle is an opaque\n       * byte sequence with a maximum size of 64 bytes, and is not meant to be\n       * displayed to the user.\n       *\n       * To ensure secure operation, authentication and authorization decisions\n       * MUST be made on the basis of this id member, not the displayName nor\n       * name members. See Section 6.1 of [RFC8266].\n       *\n       * The user handle MUST NOT contain personally identifying information\n       * about the user, such as a username or e-mail address; see § 14.6.1 User\n       * Handle Contents for details. The user handle MUST NOT be empty, though\n       * it MAY be null.\n       *\n       * Note: the user handle ought not be a constant value across different\n       * accounts, even for non-discoverable credentials, because some\n       * authenticators always create discoverable credentials. Thus a constant\n       * user handle would prevent a user from using such an authenticator with\n       * more than one account at the Relying Party.\n       *\n       * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialuserentity-id\n       */\n      id: string;\n      /**\n       * @description When inherited by PublicKeyCredentialUserEntity, it is a human-palatable\n       * identifier for a user account. It is intended only for display, i.e.,\n       * aiding the user in determining the difference between user accounts with\n       * similar displayNames. For example, \"alexm\", \"alex.mueller@example.com\"\n       * or \"+14255551234\".\n       *\n       * The Relying Party MAY let the user choose this value. The Relying Party\n       * SHOULD perform enforcement, as prescribed in Section 3.4.3 of [RFC8265]\n       * for the UsernameCasePreserved Profile of the PRECIS IdentifierClass\n       * [RFC8264], when setting name's value, or displaying the value to the\n       * user.\n       *\n       * This string MAY contain language and direction metadata. Relying Parties\n       * SHOULD consider providing this information. See § 6.4.2 Language and\n       * Direction Encoding about how this metadata is encoded.\n       *\n       * Clients SHOULD perform enforcement, as prescribed in Section 3.4.3 of [RFC8265] for the UsernameCasePreserved Profile of the PRECIS IdentifierClass [RFC8264], on name's value prior to displaying the value to the user or including the value as a parameter of the authenticatorMakeCredential operation.\n       */\n      name: string;\n    };\n    RatchetConfig: {\n      /** @default default_auth_lifetime */\n      auth_lifetime?: components[\"schemas\"][\"Seconds\"];\n      /** @default default_grace_lifetime */\n      grace_lifetime?: components[\"schemas\"][\"Seconds\"];\n      /** @default default_refresh_lifetime */\n      refresh_lifetime?: components[\"schemas\"][\"Seconds\"];\n      /** @default default_session_lifetime */\n      session_lifetime?: components[\"schemas\"][\"Seconds\"];\n    };\n    /** @description Receipt that an MFA request was approved. */\n    Receipt: {\n      /**\n       * @description Confirmation code the user needs to present when resuming the original request.\n       * @example ba1d75dd-d999-4c1b-944d-25c25440c8af\n       */\n      confirmation: string;\n      /** @description The ID of the logged-in user whose action created this approval. */\n      final_approver: string;\n      timestamp: components[\"schemas\"][\"EpochDateTime\"];\n    };\n    /**\n     * @description An extended form of `PublicKeyCredentialRequestOptions` that allows clients to derive the WebAuthn challenge\n     * from a structured preimage.\n     *\n     * This ensures that the webuathn signature can only be used for a specific purpose\n     */\n    RequestOptionsWithHash: components[\"schemas\"][\"ChallengePieces\"] & {\n      options: components[\"schemas\"][\"PublicKeyCredentialRequestOptions\"];\n    };\n    /**\n     * @description This enumeration’s values describe the Relying Party's requirements for\n     * client-side discoverable credentials (formerly known as resident credentials\n     * or resident keys):\n     *\n     * https://www.w3.org/TR/webauthn-2/#enumdef-residentkeyrequirement\n     * @enum {string}\n     */\n    ResidentKeyRequirement: \"discouraged\" | \"preferred\" | \"required\";\n    RevokeTokenResponse: {\n      token?: components[\"schemas\"][\"TokenInfo\"] | null;\n    };\n    RevokeTokensResponse: {\n      /** @description Tokens that were revoked. */\n      revoked: components[\"schemas\"][\"TokenInfo\"][];\n    };\n    RoleInfo: {\n      /**\n       * @description Whether the role is enabled\n       * @example true\n       */\n      enabled: boolean;\n      /** @description Deprecated The CubeSigner IDs of at most 100 keys associated with this role */\n      keys?: components[\"schemas\"][\"KeyInRoleInfo\"][] | null;\n      /**\n       * @description The human-readable name for the role (must be alphanumeric)\n       * @example my_role\n       */\n      name?: string | null;\n      /**\n       * @description Policy that is checked whenever a key is accessed for signing via this role.\n       * @example [\n       *   {\n       *     \"SourceIpAllowlist\": [\n       *       \"123.456.78.9/16\"\n       *     ]\n       *   },\n       *   {\n       *     \"RequireMfa\": {\n       *       \"count\": 1\n       *     }\n       *   }\n       * ]\n       */\n      policy?: Record<string, never>[];\n      /**\n       * @description The ID of the role\n       * @example Role#bfe3eccb-731e-430d-b1e5-ac1363e6b06b\n       */\n      role_id: string;\n      /** @description Deprecated. The list of at most 100 users with access to the role. */\n      users?: string[] | null;\n    };\n    /**\n     * Format: int64\n     * @description Duration measured in seconds\n     * A wrapper type for serialization that encodes a `Duration` as a `u64` representing the number of seconds.\n     */\n    Seconds: number;\n    SessionInfo: {\n      /**\n       * @description A human-readable description for the session\n       * @example OIDC login session\n       */\n      purpose: string;\n      /**\n       * @description Session ID. Uniquely identifies the session, but cannot be used for auth.\n       * @example 77aad2100c361f497635dd005c4d15781e2e5df4b9f45d8e74f37425cbc30b9e\n       */\n      session_id: string;\n    };\n    /** @description The response from any operation operating on multiple sessions */\n    SessionsResponse: {\n      /** @description The list of sessions */\n      sessions: components[\"schemas\"][\"SessionInfo\"][];\n    };\n    SignerErrorCode:\n      | components[\"schemas\"][\"SignerErrorOwnCodes\"]\n      | components[\"schemas\"][\"AcceptedValueCode\"]\n      | components[\"schemas\"][\"BadRequestErrorCode\"]\n      | components[\"schemas\"][\"BadGatewayErrorCode\"]\n      | components[\"schemas\"][\"NotFoundErrorCode\"]\n      | components[\"schemas\"][\"ForbiddenErrorCode\"]\n      | components[\"schemas\"][\"UnauthorizedErrorCode\"]\n      | components[\"schemas\"][\"PreconditionErrorCode\"]\n      | components[\"schemas\"][\"InternalErrorCode\"];\n    /** @enum {string} */\n    SignerErrorOwnCodes: \"UnhandledError\" | \"ProxyStartError\" | \"EnclaveError\";\n    /**\n     * @example {\n     *   \"message_base64\": \"AQABA8OKVzLEjststN4xXr39kLKHT8d58eQY1QEs6MeXwEFBrxTAlULX1troLbWxuAXQqgbQofGi6z8fJi7KAAIf7YMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJK0tn39k28s+X86W47EvbRRKnYBVQ8Q/l2m1EbfT7+vAQICAAEMAgAAAGQAAAAAAAAA\"\n     * }\n     */\n    SolanaSignRequest: {\n      /** @description Solana base64-encoded serialized Message */\n      message_base64: string;\n    };\n    SolanaSignResponse: {\n      /** @description The hex-encoded signature. */\n      signature: string;\n    };\n    StakeRequest: {\n      /**\n       * Format: int64\n       * @description The chain on which we will deposit\n       * @example 5\n       */\n      chain_id: number;\n      deposit_type: components[\"schemas\"][\"DepositType\"];\n      /**\n       * Format: int64\n       * @description Optional staking amount in GWEI.\n       * If not specified, defaults to 32_000_000_000 (32 ETH).\n       * Must be between 1 ETH and 32 ETH.\n       * Must not be different from the default value when 'deposit_type' is \"Wrapper\".\n       */\n      staking_amount_gwei?: number;\n      unsafe_conf?: components[\"schemas\"][\"UnsafeConf\"] | null;\n      /**\n       * @description The validator BLS public key to use, or `None` to generate a fresh one.\n       * @example 0xa99a76ed7796f7be22d5b7e85deeb7c5677e88e511e0b337618f8c4eb61349b4bf2d153f649f7b53359fe8b94a38e44c\n       */\n      validator_key?: string | null;\n      /**\n       * @description The ethereum address to which withdrawn funds go\n       * @example 0x8e3484687e66cdd26cf04c3647633ab4f3570148\n       */\n      withdrawal_addr: string;\n    };\n    StakeResponse: {\n      /**\n       * @description The validator key id (\"Key#...\")\n       * @example Key#db1731f8-3659-45c0-885b-e11e1f5b7be2\n       */\n      created_validator_key_id: string;\n      deposit_tx: components[\"schemas\"][\"DepositTxn\"];\n    };\n    Status: {\n      /** @description Users who are allowed to approve. Must be non-empty. */\n      allowed_approvers: string[];\n      /** @description Allowed approval types. When omitted, defaults to any. */\n      allowed_mfa_types?: components[\"schemas\"][\"MfaType\"][] | null;\n      /** @description Users who have already approved */\n      approved_by: {\n        [key: string]: {\n          [key: string]: components[\"schemas\"][\"ApprovalInfo\"];\n        };\n      };\n      /**\n       * Format: int32\n       * @description How many users must approve\n       */\n      count: number;\n      /**\n       * Format: int32\n       * @description How many auth factors to require per user\n       */\n      num_auth_factors: number;\n    };\n    TokenInfo: {\n      /** @description Session ID. Use it to revoke a session. Cannot be used for auth. */\n      hash: string;\n      /** @description Tokens purpose */\n      purpose: string;\n    };\n    /**\n     * @description OAuth2 standard Token Response.\n     *\n     * https://datatracker.ietf.org/doc/html/rfc6749#section-4.2.2\n     */\n    TokenResponse: {\n      /** @description The access token issued by the authorization server. */\n      access_token: string;\n      expires_in: components[\"schemas\"][\"Seconds\"];\n      /** @description An OIDC token issued by Cubist, containing user information */\n      id_token?: string;\n      /** @description The type of the token issued. Value is case insensitive. */\n      token_type: string;\n      [key: string]: unknown;\n    };\n    TotpApproveRequest: {\n      /** @description TOTP verification code */\n      code: string;\n    };\n    /** @description Sent from the client to the server to answer a TOTP challenge */\n    TotpChallengeAnswer: {\n      /** @description The current TOTP code */\n      code: string;\n      /** @description The ID of the challenge that was returned from the POST endpoint */\n      totp_id: string;\n    };\n    TotpInfo: {\n      /**\n       * @description The ID of the TOTP challenge.\n       * @example TotpChallenge#7892ebba-563e-485b-bb7d-e26267363286\n       */\n      totp_id: string;\n      /**\n       * @description Standard TOTP url which includes everything needed to initialize TOTP.\n       * @example otpauth://totp/Cubist:alice-%40example.com?secret=DAHF7KCOTQWSOMK4XFEMNHXO4J433OD7&issuer=Cubist\n       */\n      totp_url: string;\n    };\n    /** @description Request to reset TOTP. */\n    TotpResetRequest: {\n      /** @description The name of the issuer; defaults to \"Cubist\". */\n      issuer?: string | null;\n    };\n    /** @enum {string} */\n    UnauthorizedErrorCode:\n      | \"ClaimsHeaderMissing\"\n      | \"ClaimsParseError\"\n      | \"OidcIdentityHeaderMissing\"\n      | \"OidcIdentityParseError\";\n    /** @description Options that should be set only for local devnet testing. */\n    UnsafeConf: {\n      /**\n       * @description The hex-encoded address of the deposit contract. If omitted, inferred from `chain_id`\n       * @example 0xff50ed3d0ec03ac01d4c79aad74928bff48a7b2b\n       */\n      deposit_contract_addr?: string | null;\n      /**\n       * @description The hex-encoded 4-byte fork version\n       * @example 0x00001020\n       */\n      genesis_fork_version?: string | null;\n    };\n    /**\n     * @description Unstake message request.\n     * @example {\n     *   \"epoch\": \"256\",\n     *   \"fork\": {\n     *     \"current_version\": \"0x00001020\",\n     *     \"epoch\": \"0\",\n     *     \"previous_version\": \"0x00001020\"\n     *   },\n     *   \"genesis_data\": {\n     *     \"genesis_fork_version\": \"0x00001020\",\n     *     \"genesis_time\": \"1679541642\",\n     *     \"genesis_validators_root\": \"0x270d43e74ce340de4bca2b1936beca0f4f5408d9e78aec4850920baf659d5b69\"\n     *   },\n     *   \"network\": \"goerli\",\n     *   \"validator_index\": \"0\"\n     * }\n     */\n    UnstakeRequest: {\n      epoch?: components[\"schemas\"][\"Epoch\"] | null;\n      fork: components[\"schemas\"][\"Fork\"];\n      genesis_data: components[\"schemas\"][\"GenesisData\"];\n      network: components[\"schemas\"][\"Network\"];\n      /**\n       * @description Validator index (`uint64`) to exit. You can get the validator index from the Beacon node's\n       * `/eth/v1/beacon/states/head/validators/{pubkey}` end-point. This end point returns an\n       * object that contains information about the validator (whose public key is `{pubkey}`),\n       * including the validator index. The schema of this end-point is defined\n       * [here](https://ethereum.github.io/beacon-APIs/#/Beacon/getStateValidator).\n       * @example 31337\n       */\n      validator_index: string;\n    };\n    /**\n     * @description Unstake responses are signed voluntary exit messages.\n     * The schema for this message is defined\n     * [here](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedvoluntaryexit).\n     * This message can be directly POSTed to the Beacon node's\n     * `/eth/v1/beacon/pool/voluntary_exits` end-point (see expected schema\n     * [here](https://ethereum.github.io/beacon-APIs/#/Beacon/submitPoolVoluntaryExit)).\n     */\n    UnstakeResponse: {\n      message: components[\"schemas\"][\"VoluntaryExit\"];\n      /**\n       * @description BLS signature.\n       * @example 0x910c7cd537ed91cc8c4a82f3cbd832e9be8c24a22e9c86df479f7ce42025ea6a09619b418b666a060e260d2aae31b8e50e9d05ca3442c7eed3b507e5207e14674275f68c2ba84c4bf6b8dd364a304acac8cfab3681e2514b4400f9242bc61164\n       */\n      signature: string;\n    };\n    UpdateKeyRequest: {\n      /**\n       * @description If set, updates the keys's `enabled` property to this value.\n       * Once disabled, a key cannot be used for signing.\n       */\n      enabled?: boolean | null;\n      /**\n       * @description If set, update this key's metadata. Validation regex: ^[A-Za-z0-9_=+/ \\-\\.\\,]{0,1024}$\n       * @example Contract admin key\n       */\n      metadata?: string | null;\n      /**\n       * @description If set, updates key's owner to this value.\n       * The new owner must be an existing user who is a member of the same org.\n       * @example User#c3b9379c-4e8c-4216-bd0a-65ace53cf98f\n       */\n      owner?: string | null;\n      /**\n       * @description If set, update this key's policies (old policies will be overwritten!).\n       * @example [\n       *   \"AllowRawBlobSigning\",\n       *   {\n       *     \"RequireMfa\": {\n       *       \"count\": 1\n       *     }\n       *   }\n       * ]\n       */\n      policy?: Record<string, never>[] | null;\n    };\n    UpdateOrgRequest: {\n      /** @description If set, update this org's `enabled` field to this value. */\n      enabled?: boolean | null;\n      /**\n       * @description If set, update this org's alias.  Org aliases are globally unique.\n       * @example my_org\n       */\n      name?: string | null;\n      /**\n       * @description If set, update this org's notification endpoints. Notification endpoints are expected to be\n       * HTTPS URLs, which accept POST requests. The body of the requests sent to these endpoints are\n       * are formatted in JSON and have the following format:\n       *\n       * ```json\n       * {\n       * \"org\": \"...\",\n       * \"utc_timestamp\": \"...\",\n       * \"org_event\": \"...\",\n       * ...\n       * }\n       * ```\n       *\n       * `org` is the org id, `utc_timestamp` is the UTC timestamp of the event in milliseconds, and\n       * `org_event` is a string identifying the type of event that has occurred. The rest of the\n       * fields provide additional information related to the type of the event.\n       *\n       * Endpoints can optionally include filters to customize the org events that they are notified\n       * about. Currently, the only supported filter type is `OneOf`, which expects a list of org\n       * event types to send to the endpoint. If no filter is configured, the system sends all org\n       * events to the endpoint.\n       * @example [\n       *   {\n       *     \"url:\": \"https://example.com/endpoint1\"\n       *   },\n       *   {\n       *     \"filter\": {\n       *       \"OneOf\": [\n       *         \"Eth2ConcurrentAttestationSigning\",\n       *         \"Eth2ConcurrentBlockSigning\"\n       *       ]\n       *     },\n       *     \"url:\": \"https://example.com/endpoint2\"\n       *   }\n       * ]\n       */\n      notification_endpoints?: Record<string, never>[] | null;\n      /**\n       * @description If set, update this org's policies (old policies will be overwritten!).\n       * @example [\n       *   {\n       *     \"MaxDailyUnstake\": 5\n       *   },\n       *   {\n       *     \"OriginAllowlist\": [\n       *       \"https://example.com\"\n       *     ]\n       *   },\n       *   {\n       *     \"SourceIpAllowlist\": [\n       *       \"10.1.2.3/8\",\n       *       \"169.254.17.1/16\"\n       *     ]\n       *   }\n       * ]\n       */\n      policy?: Record<string, never>[] | null;\n      /**\n       * Format: int32\n       * @description If set, update this org's TOTP failure limit. After this many failures,\n       * the user is rate limited until the next 30-second TOTP window.\n       */\n      totp_failure_limit?: number | null;\n      /**\n       * Format: int64\n       * @description If set, update this org's user-export delay, i.e., the amount of time\n       * (in seconds) between a user's initiating an export and the time when\n       * export is allowed. For security, this delay cannot be set to less than\n       * 172800, i.e., 2 days.\n       */\n      user_export_delay?: number | null;\n      /**\n       * Format: int64\n       * @description If set, update this org's user-export window, i.e., the amount of time\n       * (in seconds) that export is allowed after the user-export delay. After\n       * this amount of time, the export is canceled and must be re-initiated.\n       * For security, this window cannot be set to greater than 259200, i.e.,\n       * 3 days.\n       */\n      user_export_window?: number | null;\n    };\n    UpdateOrgResponse: {\n      /** @description The new value of the 'enabled' property */\n      enabled?: boolean | null;\n      /**\n       * @description The new human-readable name for the org (must be alphanumeric)\n       * @example my_org_name\n       */\n      name?: string | null;\n      /**\n       * @description The new notification endpoint configurations\n       * @example [\n       *   {\n       *     \"url\": \"https://example.com/endpoint\"\n       *   }\n       * ]\n       */\n      notification_endpoints?: Record<string, never>[];\n      /**\n       * @description The ID of the organization\n       * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n       */\n      org_id: string;\n      /**\n       * @description The new value of org-wide policies\n       * @example [\n       *   {\n       *     \"MaxDailyUnstake\": 5\n       *   },\n       *   {\n       *     \"OriginAllowlist\": [\n       *       \"https://example.com\"\n       *     ]\n       *   }\n       * ]\n       */\n      policy?: Record<string, never>[] | null;\n      /**\n       * Format: int32\n       * @description The new value of the TOTP failure limit\n       */\n      totp_failure_limit?: number | null;\n      /**\n       * Format: int64\n       * @description The new value of user-export delay\n       */\n      user_export_delay?: number | null;\n      /**\n       * Format: int64\n       * @description The new value of user-export window\n       */\n      user_export_window?: number | null;\n    };\n    UpdateRoleRequest: {\n      /**\n       * @description If set, updates the role's `enabled` property to this value.\n       * Once disabled, a role cannot be used; and it's tokens cannot be used for signing.\n       */\n      enabled?: boolean | null;\n      /**\n       * @description If set, update this role's key policies (old policies will be overwritten!).\n       * Only \"deny\" style policies may be set.\n       * @example [\n       *   {\n       *     \"SourceIpAllowlist\": [\n       *       \"123.456.78.9/16\"\n       *     ]\n       *   }\n       * ]\n       */\n      policy?: Record<string, never>[] | null;\n    };\n    /** @description A request to complete a user export */\n    UserExportCompleteRequest: {\n      /**\n       * @description The id of the key to be exported. The key-id must correspond to the one in\n       * the specified export request, and the caller must own this key.\n       * @example Key#0x3c4d90Cc5Af1644C3A3B013Baa5488997381D7C8\n       */\n      key_id: string;\n      /**\n       * @description The NIST P-256 public key (base64-encoded SEC1 with or without compression)\n       * to which the export will be encrypted. If a public key was provided when\n       * `user_export_init` was called, this key must match that one.\n       * @example AkpLT/3dXApJzXSduaPQ7apyT0ADBwqkt1es/aT0iWWf\n       */\n      public_key: string;\n    };\n    /** @description An encrypted user-export */\n    UserExportCompleteResponse: {\n      /**\n       * @description The exported key material, encrypted with AES-256-GCM under a key\n       * derived from the public key supplied in the request via HPKE (RFC9180)\n       * with DHKEM(P-256, HKDF-SHA256) and base64 encoded.\n       */\n      encrypted_key_material: string;\n      /**\n       * @description The ephemeral public key used for HPKE key derivation as base64-encoded\n       * uncompressed SEC1 serialization.\n       */\n      ephemeral_public_key: string;\n      /** @description The user-id to which this key belongs. */\n      user_id: string;\n    };\n    /** @description A request to initiate a user export */\n    UserExportInitRequest: {\n      /**\n       * @description The id of the key to be exported. This key must be owned by the caller.\n       * @example Key#0x3c4d90Cc5Af1644C3A3B013Baa5488997381D7C8\n       */\n      key_id: string;\n      /**\n       * @description An optional NIST P-256 public key (base64-encoded SEC1 with or without\n       * compression) to which the export will be encrypted. If provided, this\n       * public key MUST be the one used to encrypt the export once the delay has\n       * expired. Otherwise, the user can provide any public key when completing\n       * the export request post delay.\n       *\n       * This option may provide extra security when the user has a secure hardware\n       * device (e.g., a phone's secure element or a YubiKey) in which a NIST P-256\n       * secret key can be generated. Providing the corresponding public key here\n       * ensures that only that specific device will be capable of decrypting\n       * the export ciphertext.\n       *\n       * If no secure hardware device is available to store the secret key, this\n       * option SHOULD NOT be used because of the risk of secret key theft during\n       * the export delay period.\n       * @example AkpLT/3dXApJzXSduaPQ7apyT0ADBwqkt1es/aT0iWWf\n       */\n      public_key?: string | null;\n    };\n    /** @description The response to a successful user-export init request */\n    UserExportInitResponse: components[\"schemas\"][\"UserExportRequest\"] & {\n      /**\n       * @description The key-id being requested.\n       * @example Key#0x3c4d90Cc5Af1644C3A3B013Baa5488997381D7C8\n       */\n      key_id: string;\n    };\n    /** @description Pending user-export request as stored in the database. */\n    UserExportRequest: {\n      exp_epoch: components[\"schemas\"][\"EpochDateTime\"];\n      /**\n       * @description The org-id in which the key is housed.\n       * @example Org#f361ed6b-5d19-4ccf-a4d5-eba935dc0b90\n       */\n      org_id: string;\n      /**\n       * @description The SHA-256 hash of the public key provided at export initiation,\n       * if any. If a key was provided, only that key can be used to complete\n       * the export procedure. Otherwise, any key can be used.\n       *\n       * IMPORTANT: if a public key is supplied at export initiation, it is\n       * STRONGLY RECOMMENDED that the corresponding secret key be stored in\n       * a secure hardware device, e.g., a YubiKey or a phone's secure element.\n       * If no such hardware is available, supplying a public key at export\n       * initiation is STRONGLY DISCOURAGED because of the risk of theft during\n       * the export delay period.\n       *\n       * (See also the comment in the `public_key` field of `UserInitRequest`.)\n       * @example df457a98d5538540f54d1316b597a0f39b8d96f488f10a2e31a955c146fdf1d3\n       */\n      public_key_hash?: string | null;\n      valid_epoch: components[\"schemas\"][\"EpochDateTime\"];\n    };\n    UserInOrgInfo: {\n      /**\n       * @description The user's email\n       * @example alice@example.com\n       */\n      email: string;\n      /**\n       * @description The id of the user\n       * @example User#c3b9379c-4e8c-4216-bd0a-65ace53cf98f\n       */\n      id: string;\n      membership: components[\"schemas\"][\"MemberRole\"];\n      /** @description Optional user name. */\n      name?: string | null;\n    };\n    UserInRoleInfo: {\n      user_id: string;\n    };\n    UserInfo: {\n      /**\n       * @description Optional email\n       * @example alice@example.com\n       */\n      email: string;\n      /** @description All multi-factor authentication methods configured for this user */\n      mfa: components[\"schemas\"][\"ConfiguredMfa\"][];\n      /** @description MFA policy, applies before logging in and other sensitive operations */\n      mfa_policy?: unknown;\n      /**\n       * @description Optional name\n       * @example Alice\n       */\n      name?: string | null;\n      /**\n       * @description All organizations the user belongs to\n       * @example [\n       *   \"Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\"\n       * ]\n       */\n      org_ids: string[];\n      /**\n       * @description The id of the currently logged in user\n       * @example User#c3b9379c-4e8c-4216-bd0a-65ace53cf98f\n       */\n      user_id: string;\n    };\n    /**\n     * @description A WebAuthn Relying Party may require user verification for some of its\n     * operations but not for others, and may use this type to express its needs.\n     *\n     * https://www.w3.org/TR/webauthn-2/#enum-userVerificationRequirement\n     * @enum {string}\n     */\n    UserVerificationRequirement: \"required\" | \"discouraged\" | \"preferred\";\n    /**\n     * @description An exit voluntarily submitted a validator who wishes to withdraw.\n     * The schema for this message is defined\n     * [here](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedvoluntaryexit).\n     */\n    VoluntaryExit: {\n      epoch: components[\"schemas\"][\"Epoch\"];\n      /**\n       * @description Index of the exiting validator.\n       * @example 256\n       */\n      validator_index: string;\n    };\n  };\n  responses: {\n    AddThirdPartyUserResponse: {\n      content: {\n        \"application/json\": {\n          /** @example User#c3b9379c-4e8c-4216-bd0a-65ace53cf98f */\n          user_id: string;\n        };\n      };\n    };\n    AvaSignResponse: {\n      content: {\n        \"application/json\": {\n          /** @description The hex-encoded signature. */\n          signature: string;\n        };\n      };\n    };\n    BlobSignResponse: {\n      content: {\n        \"application/json\": {\n          /** @description The hex-encoded signature. */\n          signature: string;\n        };\n      };\n    };\n    BtcSignResponse: {\n      content: {\n        \"application/json\": {\n          /**\n           * @description The hex-encoded signature in compact format.\n           * @example 0x454aef27c21df7dd8f537dc869f4cd65286ce239a52d36470f4d85be85a891b02789e5ffd8560b32a98110e5d0096802e4c14145cf6c44f10a768c87755eaa4800\n           */\n          signature: string;\n        };\n      };\n    };\n    CreateKeyImportKeyResponse: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"KeyImportKey\"] & {\n          /**\n           * @description An attestation document from a secure enclave, including an\n           * RSA signing key used to sign the contents of this message.\n           */\n          enclave_attestation: string;\n          /**\n           * @description An RSA-PSS-SHA256 signature on the public key and encrypted\n           * secrets attesting to their generation inside a secure enclave.\n           */\n          enclave_signature: string;\n        };\n      };\n    };\n    CreateKeyResponse: {\n      content: {\n        \"application/json\": {\n          /** @description The info about the created keys */\n          keys: components[\"schemas\"][\"KeyInfo\"][];\n        };\n      };\n    };\n    /** @description The newly created role information */\n    CreateRoleResponse: {\n      content: {\n        \"application/json\": {\n          /**\n           * @description A human-readable name for the role.\n           * @example my_role\n           */\n          name?: string | null;\n          /**\n           * @description The id of the newly created role\n           * @example Role#bfe3eccb-731e-430d-b1e5-ac1363e6b06b\n           */\n          role_id: string;\n        };\n      };\n    };\n    Eip191Or712SignResponse: {\n      content: {\n        \"application/json\": {\n          /**\n           * @description Hex-encoded signature comprising 65 bytes in the format required\n           * by ecrecover: 32-byte r, 32-byte s, and one-byte recovery-id v\n           * which is either 27 or 28.\n           * @example 0x4355c47d63924e8a72e509b65029052eb6c299d53a04e167c5775fd466751c9d07299936d304c153f6443dfa05f40ff007d72911b6f72307f996231605b915621c\n           */\n          signature: string;\n        };\n      };\n    };\n    EmptyImpl: {\n      content: {\n        \"application/json\": {\n          status: string;\n        };\n      };\n    };\n    Eth1SignResponse: {\n      content: {\n        \"application/json\": {\n          /**\n           * @description Hex-encoded RLP encoding of the transaction and its signature\n           * @example 0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001201d58656b0e22aaa68fdc692db41979098c3886ed33015d7467de9211609cdac000000000000000000000000000000000000000000000000000000000000000308b0c2900324d3ff9adfba7fdfe5af3f9b2cdbeef7b280437bbf1b1c59a093d615afe3e5dfed9622b540cdd9b49b3c5ad00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002001000000000000000000000049011adbcc3bc9c0307bb07f37dda1a1a9c69d2e0000000000000000000000000000000000000000000000000000000000000060903db8525674b8e7904f9b7d7d9ec55a0a42d33cf58be25469b0c21bbb6d06172bc5bb5fd1aed8e4f35936968958116b0619553c2cb1c52e7323074c6f8eb3d5a7074fc6580148df907837fa3b164ad7fbc2288dad1e8a5b021095b57c8a36d4\n           */\n          rlp_signed_tx: string;\n        };\n      };\n    };\n    Eth2SignResponse: {\n      content: {\n        \"application/json\": {\n          /**\n           * @description Hex encoded signature prefixed with 0x e.g. \"0x0000...\"\n           * @example 0xb4f2ef9d12a54e1f569596c07c97d6d730535b6ffc0d287761dc78103a86326782471a04c75ce7a6faea08ca9a4a0830031cdcb893da8711d54aa22619f1a7e71b8185ddf4c6bfd9babbd735960e35e56bd6eeb89625b04850e7a9ef8846e549\n           */\n          signature: string;\n        };\n      };\n    };\n    FidoAssertChallenge: {\n      content: {\n        \"application/json\": (components[\"schemas\"][\"ChallengePieces\"] & {\n          options: components[\"schemas\"][\"PublicKeyCredentialRequestOptions\"];\n        }) & {\n          /** @description The id of the challenge. Must be supplied when answering the challenge. */\n          challenge_id: string;\n        };\n      };\n    };\n    /**\n     * @description Sent by the server to the client. Contains the challenge data that must be\n     * used to generate a new credential\n     */\n    FidoCreateChallengeResponse: {\n      content: {\n        \"application/json\": (components[\"schemas\"][\"ChallengePieces\"] & {\n          options: components[\"schemas\"][\"PublicKeyCredentialCreationOptions\"];\n        }) & {\n          /** @description The id of the challenge. Must be supplied when answering the challenge. */\n          challenge_id: string;\n        };\n      };\n    };\n    GetUsersInOrgResponse: {\n      content: {\n        \"application/json\": {\n          /** @description The list of users in the org */\n          users: components[\"schemas\"][\"UserInOrgInfo\"][];\n        };\n      };\n    };\n    /**\n     * @description Proof that an end-user provided CubeSigner with a valid auth token\n     * (either an OIDC token or a CubeSigner session token)\n     */\n    IdentityProof: {\n      content: {\n        \"application/json\": {\n          /**\n           * @description OIDC audience; set only if the proof was obtained by using OIDC token.\n           *\n           * In other words, presence of this field testifies that authorization was obtained via OIDC.\n           */\n          aud?: string | null;\n          /**\n           * @description The email associated with the user\n           * @example user@email.com\n           */\n          email?: string | null;\n          exp_epoch: components[\"schemas\"][\"EpochDateTime\"];\n          identity?: components[\"schemas\"][\"OIDCIdentity\"] | null;\n          /**\n           * @description The username (if any) associated with the user\n           * @example cubistdev\n           */\n          preferred_username?: string | null;\n          user_info?: components[\"schemas\"][\"CubeSignerUserInfo\"] | null;\n        } & {\n          /** @description An opaque identifier for the proof */\n          id: string;\n        };\n      };\n    };\n    /** @description Derivation-related metadata for keys derived from a long-lived mnemonic */\n    KeyDerivationInfo: {\n      content: {\n        \"application/json\": {\n          /** @description The derivation path used to derive this key */\n          derivation_path: string;\n          /** @description The mnemonic-id of the key's parent mnemonic */\n          mnemonic_id: string;\n        };\n      };\n    };\n    /** @description A wrapped key-import key */\n    KeyImportKey: {\n      content: {\n        \"application/json\": {\n          /** @description Base64-encoded, encrypted data key. */\n          dk_enc: string;\n          /**\n           * Format: int64\n           * @description Expiration timestamp expressed as seconds since the UNIX epoch.\n           */\n          expires: number;\n          /**\n           * @description The ephemeral public key to which an imported key should be encrypted.\n           * This is a P384 public key in base64-encoded uncompressed SECG format.\n           */\n          public_key: string;\n          /** @description Base64-encoded, encrypted secret key. */\n          sk_enc: string;\n        };\n      };\n    };\n    KeyInfo: {\n      content: {\n        \"application/json\": {\n          derivation_info?: components[\"schemas\"][\"KeyDerivationInfo\"] | null;\n          /** @description Whether the key is enabled (only enabled keys may be used for signing) */\n          enabled: boolean;\n          /**\n           * @description The id of the key: \"Key#\" followed by a unique identifier specific to\n           * the type of key (such as a public key for BLS or an ethereum address for Secp)\n           * @example Key#0x8e3484687e66cdd26cf04c3647633ab4f3570148\n           */\n          key_id: string;\n          key_type: components[\"schemas\"][\"KeyType\"];\n          /**\n           * @description A unique identifier specific to the type of key, such as a public key or an ethereum address\n           * @example 0x8e3484687e66cdd26cf04c3647633ab4f3570148\n           */\n          material_id: string;\n          /**\n           * @description User-defined metadata. When rendering (e.g., in the browser) you should treat\n           * it as untrusted user data (and avoid injecting metadata into HTML directly) if\n           * untrusted users can create/update keys (or their metadata).\n           */\n          metadata?: string;\n          /**\n           * @description Owner of the key\n           * @example User#c3b9379c-4e8c-4216-bd0a-65ace53cf98f\n           */\n          owner: string;\n          /**\n           * @description Key policy\n           * @example [\n           *   \"AllowRawBlobSigning\",\n           *   {\n           *     \"RequireMfa\": {\n           *       \"count\": 1\n           *     }\n           *   }\n           * ]\n           */\n          policy: Record<string, never>[];\n          /**\n           * @description Hex-encoded, serialized public key. The format used depends on the key type:\n           * - Secp256k1 keys use 65-byte uncompressed SECG format;\n           * - Stark keys use 33-byte compressed SECG format;\n           * - BLS keys use 48-byte compressed BLS12-381 (ZCash) format;\n           * - Ed25519 keys use the canonical 32-byte encoding specified in RFC 8032.\n           * @example 0x04d2688b6bc2ce7f9879b9e745f3c4dc177908c5cef0c1b64cff19ae7ff27dee623c64fe9d9c325c7fbbc748bbd5f607ce14dd83e28ebbbb7d3e7f2ffb70a79431\n           */\n          public_key: string;\n          /**\n           * @description The purpose for which the key can be used (e.g., chain id for which the key is allowed to sign messages)\n           * @example Eth2Validator(1)\n           */\n          purpose: string;\n        };\n      };\n    };\n    KeyInfos: {\n      content: {\n        \"application/json\": {\n          keys: components[\"schemas\"][\"KeyInfo\"][];\n        };\n      };\n    };\n    ListMfaResponse: {\n      content: {\n        \"application/json\": {\n          /** @description All pending MFA requests */\n          mfa_requests: components[\"schemas\"][\"MfaRequestInfo\"][];\n        };\n      };\n    };\n    ListTokensResponse: {\n      content: {\n        \"application/json\": {\n          tokens: components[\"schemas\"][\"TokenInfo\"][];\n        };\n      };\n    };\n    /** @description Returned as a response from multiple routes (e.g., 'get mfa', 'approve mfa', 'approve totp'). */\n    MfaRequestInfo: {\n      content: {\n        \"application/json\": {\n          expires_at: components[\"schemas\"][\"EpochDateTime\"];\n          /** @description Approval request ID. */\n          id: string;\n          receipt?: components[\"schemas\"][\"Receipt\"] | null;\n          request: components[\"schemas\"][\"HttpRequest\"];\n          status: components[\"schemas\"][\"Status\"];\n        };\n      };\n    };\n    /** @description Information about a new session, returned from multiple endpoints (e.g., login, refresh, etc.). */\n    NewSessionResponse: {\n      content: {\n        \"application/json\": {\n          /**\n           * Format: int64\n           * @description Session expiration (in seconds since UNIX epoch), beyond which it cannot be refreshed.\n           * @example 1701879640\n           */\n          expiration?: number;\n          session_info: components[\"schemas\"][\"ClientSessionInfo\"];\n          /**\n           * @description New token to be used for authentication. Requests to signing endpoints\n           * should include this value in the `Authorization` header\n           */\n          token: string;\n        };\n      };\n    };\n    OrgInfo: {\n      content: {\n        \"application/json\": {\n          /** @description When false, all cryptographic operations involving keys in this org are disabled. */\n          enabled: boolean;\n          /** @description Deprecated: this field should be ignored. */\n          key_import_key?: string | null;\n          /**\n           * @description The organization's universally unique key-wrapping-key identifier.\n           * This value is required when setting up key export.\n           * @example mrk-fce09525e81587d23520f11e07e2e9d9\n           */\n          kwk_id: string;\n          /**\n           * @description Date/time (in UTC) when last 'unstake' was performed. Unix epoch if none.\n           * @example TODO\n           */\n          last_unstake: string;\n          /**\n           * Format: int32\n           * @description How many 'unstake' calls happened on the day when `last_unstake` was performed.\n           */\n          last_unstake_day_count: number;\n          /**\n           * @description The human-readable name for the org\n           * @example my_org_name\n           */\n          name?: string | null;\n          /**\n           * @description The organization's notification endpoints, which are HTTPS URLs are notified about a\n           * configurable set of events in an organization. For each event, CubeSigner sends a POST\n           * request with a JSON-formatted body that contains the event details.\n           * @example [\n           *   {\n           *     \"url\": \"https://example.com/endpoint\"\n           *   }\n           * ]\n           */\n          notification_endpoints?: Record<string, never>[];\n          /**\n           * @description The ID of the organization\n           * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n           */\n          org_id: string;\n          /**\n           * @description Org-wide policies that are checked before a key is used for signing\n           * @example [\n           *   {\n           *     \"MaxDailyUnstake\": 5\n           *   }\n           * ]\n           */\n          policy?: Record<string, never>[];\n          /**\n           * Format: int32\n           * @description The organization's currently configured TOTP failure limit, i.e., the number\n           * of times a user can provide an incorrect TOTP code before being rate limited.\n           * This value can be between 1 and 5 (inclusive).\n           */\n          totp_failure_limit: number;\n          /**\n           * Format: int64\n           * @description The organization's currently configured user-export delay, i.e., the minimum\n           * amount of time (in seconds) between when a user-export is initiated and when\n           * it may be completed. (This value is meaningless for organizations that use\n           * org-wide export.)\n           */\n          user_export_delay: number;\n          /**\n           * Format: int64\n           * @description The organization's currently configured user-export window, i.e., the amount\n           * of time (in seconds) between when the user-export delay is completed and when\n           * the user export request has expired and can no longer be completed. (This value\n           * is meaningless for organizations that use org-wide export.)\n           */\n          user_export_window: number;\n        };\n      };\n    };\n    PaginatedListKeyRolesResponse: {\n      content: {\n        \"application/json\": {\n          /** @description All roles the key is in */\n          roles: components[\"schemas\"][\"KeyInRoleInfo\"][];\n        } & {\n          /**\n           * @description If set, the content of `response` does not contain the entire result set.\n           * To fetch the next page of the result set, call the same endpoint\n           * but specify this value as the 'page.start' query parameter.\n           */\n          last_evaluated_key?: string | null;\n        };\n      };\n    };\n    PaginatedListKeysResponse: {\n      content: {\n        \"application/json\": {\n          keys: components[\"schemas\"][\"KeyInfo\"][];\n        } & {\n          /**\n           * @description If set, the content of `response` does not contain the entire result set.\n           * To fetch the next page of the result set, call the same endpoint\n           * but specify this value as the 'page.start' query parameter.\n           */\n          last_evaluated_key?: string | null;\n        };\n      };\n    };\n    PaginatedListRoleKeysResponse: {\n      content: {\n        \"application/json\": {\n          /** @description All keys in a role */\n          keys: components[\"schemas\"][\"KeyInRoleInfo\"][];\n        } & {\n          /**\n           * @description If set, the content of `response` does not contain the entire result set.\n           * To fetch the next page of the result set, call the same endpoint\n           * but specify this value as the 'page.start' query parameter.\n           */\n          last_evaluated_key?: string | null;\n        };\n      };\n    };\n    PaginatedListRoleUsersResponse: {\n      content: {\n        \"application/json\": {\n          /** @description All users in a role */\n          users: components[\"schemas\"][\"UserInRoleInfo\"][];\n        } & {\n          /**\n           * @description If set, the content of `response` does not contain the entire result set.\n           * To fetch the next page of the result set, call the same endpoint\n           * but specify this value as the 'page.start' query parameter.\n           */\n          last_evaluated_key?: string | null;\n        };\n      };\n    };\n    PaginatedListRolesResponse: {\n      content: {\n        \"application/json\": {\n          /** @description All roles in an organization. */\n          roles: components[\"schemas\"][\"RoleInfo\"][];\n        } & {\n          /**\n           * @description If set, the content of `response` does not contain the entire result set.\n           * To fetch the next page of the result set, call the same endpoint\n           * but specify this value as the 'page.start' query parameter.\n           */\n          last_evaluated_key?: string | null;\n        };\n      };\n    };\n    PaginatedSessionsResponse: {\n      content: {\n        \"application/json\": {\n          /** @description The list of sessions */\n          sessions: components[\"schemas\"][\"SessionInfo\"][];\n        } & {\n          /**\n           * @description If set, the content of `response` does not contain the entire result set.\n           * To fetch the next page of the result set, call the same endpoint\n           * but specify this value as the 'page.start' query parameter.\n           */\n          last_evaluated_key?: string | null;\n        };\n      };\n    };\n    PaginatedUserExportListResponse: {\n      content: {\n        \"application/json\": {\n          export_requests: components[\"schemas\"][\"UserExportInitResponse\"][];\n        } & {\n          /**\n           * @description If set, the content of `response` does not contain the entire result set.\n           * To fetch the next page of the result set, call the same endpoint\n           * but specify this value as the 'page.start' query parameter.\n           */\n          last_evaluated_key?: string | null;\n        };\n      };\n    };\n    RevokeTokenResponse: {\n      content: {\n        \"application/json\": {\n          token?: components[\"schemas\"][\"TokenInfo\"] | null;\n        };\n      };\n    };\n    RevokeTokensResponse: {\n      content: {\n        \"application/json\": {\n          /** @description Tokens that were revoked. */\n          revoked: components[\"schemas\"][\"TokenInfo\"][];\n        };\n      };\n    };\n    RoleInfo: {\n      content: {\n        \"application/json\": {\n          /**\n           * @description Whether the role is enabled\n           * @example true\n           */\n          enabled: boolean;\n          /** @description Deprecated The CubeSigner IDs of at most 100 keys associated with this role */\n          keys?: components[\"schemas\"][\"KeyInRoleInfo\"][] | null;\n          /**\n           * @description The human-readable name for the role (must be alphanumeric)\n           * @example my_role\n           */\n          name?: string | null;\n          /**\n           * @description Policy that is checked whenever a key is accessed for signing via this role.\n           * @example [\n           *   {\n           *     \"SourceIpAllowlist\": [\n           *       \"123.456.78.9/16\"\n           *     ]\n           *   },\n           *   {\n           *     \"RequireMfa\": {\n           *       \"count\": 1\n           *     }\n           *   }\n           * ]\n           */\n          policy?: Record<string, never>[];\n          /**\n           * @description The ID of the role\n           * @example Role#bfe3eccb-731e-430d-b1e5-ac1363e6b06b\n           */\n          role_id: string;\n          /** @description Deprecated. The list of at most 100 users with access to the role. */\n          users?: string[] | null;\n        };\n      };\n    };\n    SessionInfo: {\n      content: {\n        \"application/json\": {\n          /**\n           * @description A human-readable description for the session\n           * @example OIDC login session\n           */\n          purpose: string;\n          /**\n           * @description Session ID. Uniquely identifies the session, but cannot be used for auth.\n           * @example 77aad2100c361f497635dd005c4d15781e2e5df4b9f45d8e74f37425cbc30b9e\n           */\n          session_id: string;\n        };\n      };\n    };\n    /** @description The response from any operation operating on multiple sessions */\n    SessionsResponse: {\n      content: {\n        \"application/json\": {\n          /** @description The list of sessions */\n          sessions: components[\"schemas\"][\"SessionInfo\"][];\n        };\n      };\n    };\n    SolanaSignResponse: {\n      content: {\n        \"application/json\": {\n          /** @description The hex-encoded signature. */\n          signature: string;\n        };\n      };\n    };\n    StakeResponse: {\n      content: {\n        \"application/json\": {\n          /**\n           * @description The validator key id (\"Key#...\")\n           * @example Key#db1731f8-3659-45c0-885b-e11e1f5b7be2\n           */\n          created_validator_key_id: string;\n          deposit_tx: components[\"schemas\"][\"DepositTxn\"];\n        };\n      };\n    };\n    TokenInfo: {\n      content: {\n        \"application/json\": {\n          /** @description Session ID. Use it to revoke a session. Cannot be used for auth. */\n          hash: string;\n          /** @description Tokens purpose */\n          purpose: string;\n        };\n      };\n    };\n    /**\n     * @description OAuth2 standard Token Response.\n     *\n     * https://datatracker.ietf.org/doc/html/rfc6749#section-4.2.2\n     */\n    TokenResponse: {\n      content: {\n        \"application/json\": {\n          /** @description The access token issued by the authorization server. */\n          access_token: string;\n          expires_in: components[\"schemas\"][\"Seconds\"];\n          /** @description An OIDC token issued by Cubist, containing user information */\n          id_token?: string;\n          /** @description The type of the token issued. Value is case insensitive. */\n          token_type: string;\n          [key: string]: unknown;\n        };\n      };\n    };\n    TotpInfo: {\n      content: {\n        \"application/json\": {\n          /**\n           * @description The ID of the TOTP challenge.\n           * @example TotpChallenge#7892ebba-563e-485b-bb7d-e26267363286\n           */\n          totp_id: string;\n          /**\n           * @description Standard TOTP url which includes everything needed to initialize TOTP.\n           * @example otpauth://totp/Cubist:alice-%40example.com?secret=DAHF7KCOTQWSOMK4XFEMNHXO4J433OD7&issuer=Cubist\n           */\n          totp_url: string;\n        };\n      };\n    };\n    /**\n     * @description Unstake responses are signed voluntary exit messages.\n     * The schema for this message is defined\n     * [here](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedvoluntaryexit).\n     * This message can be directly POSTed to the Beacon node's\n     * `/eth/v1/beacon/pool/voluntary_exits` end-point (see expected schema\n     * [here](https://ethereum.github.io/beacon-APIs/#/Beacon/submitPoolVoluntaryExit)).\n     */\n    UnstakeResponse: {\n      content: {\n        \"application/json\": {\n          message: components[\"schemas\"][\"VoluntaryExit\"];\n          /**\n           * @description BLS signature.\n           * @example 0x910c7cd537ed91cc8c4a82f3cbd832e9be8c24a22e9c86df479f7ce42025ea6a09619b418b666a060e260d2aae31b8e50e9d05ca3442c7eed3b507e5207e14674275f68c2ba84c4bf6b8dd364a304acac8cfab3681e2514b4400f9242bc61164\n           */\n          signature: string;\n        };\n      };\n    };\n    UpdateOrgResponse: {\n      content: {\n        \"application/json\": {\n          /** @description The new value of the 'enabled' property */\n          enabled?: boolean | null;\n          /**\n           * @description The new human-readable name for the org (must be alphanumeric)\n           * @example my_org_name\n           */\n          name?: string | null;\n          /**\n           * @description The new notification endpoint configurations\n           * @example [\n           *   {\n           *     \"url\": \"https://example.com/endpoint\"\n           *   }\n           * ]\n           */\n          notification_endpoints?: Record<string, never>[];\n          /**\n           * @description The ID of the organization\n           * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n           */\n          org_id: string;\n          /**\n           * @description The new value of org-wide policies\n           * @example [\n           *   {\n           *     \"MaxDailyUnstake\": 5\n           *   },\n           *   {\n           *     \"OriginAllowlist\": [\n           *       \"https://example.com\"\n           *     ]\n           *   }\n           * ]\n           */\n          policy?: Record<string, never>[] | null;\n          /**\n           * Format: int32\n           * @description The new value of the TOTP failure limit\n           */\n          totp_failure_limit?: number | null;\n          /**\n           * Format: int64\n           * @description The new value of user-export delay\n           */\n          user_export_delay?: number | null;\n          /**\n           * Format: int64\n           * @description The new value of user-export window\n           */\n          user_export_window?: number | null;\n        };\n      };\n    };\n    /** @description An encrypted user-export */\n    UserExportCompleteResponse: {\n      content: {\n        \"application/json\": {\n          /**\n           * @description The exported key material, encrypted with AES-256-GCM under a key\n           * derived from the public key supplied in the request via HPKE (RFC9180)\n           * with DHKEM(P-256, HKDF-SHA256) and base64 encoded.\n           */\n          encrypted_key_material: string;\n          /**\n           * @description The ephemeral public key used for HPKE key derivation as base64-encoded\n           * uncompressed SEC1 serialization.\n           */\n          ephemeral_public_key: string;\n          /** @description The user-id to which this key belongs. */\n          user_id: string;\n        };\n      };\n    };\n    /** @description The response to a successful user-export init request */\n    UserExportInitResponse: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"UserExportRequest\"] & {\n          /**\n           * @description The key-id being requested.\n           * @example Key#0x3c4d90Cc5Af1644C3A3B013Baa5488997381D7C8\n           */\n          key_id: string;\n        };\n      };\n    };\n    UserInfo: {\n      content: {\n        \"application/json\": {\n          /**\n           * @description Optional email\n           * @example alice@example.com\n           */\n          email: string;\n          /** @description All multi-factor authentication methods configured for this user */\n          mfa: components[\"schemas\"][\"ConfiguredMfa\"][];\n          /** @description MFA policy, applies before logging in and other sensitive operations */\n          mfa_policy?: unknown;\n          /**\n           * @description Optional name\n           * @example Alice\n           */\n          name?: string | null;\n          /**\n           * @description All organizations the user belongs to\n           * @example [\n           *   \"Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\"\n           * ]\n           */\n          org_ids: string[];\n          /**\n           * @description The id of the currently logged in user\n           * @example User#c3b9379c-4e8c-4216-bd0a-65ace53cf98f\n           */\n          user_id: string;\n        };\n      };\n    };\n  };\n  parameters: never;\n  requestBodies: never;\n  headers: never;\n  pathItems: never;\n}\n\nexport type $defs = Record<string, never>;\n\nexport type external = Record<string, never>;\n\nexport interface operations {\n  /**\n   * User Info\n   * @description User Info\n   *\n   * Retrieves information about the current user.\n   */\n  aboutMeLegacy: {\n    responses: {\n      200: components[\"responses\"][\"UserInfo\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Get Org\n   * @description Get Org\n   *\n   * Retrieves information about an organization.\n   */\n  getOrg: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"OrgInfo\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Update Org\n   * @description Update Org\n   *\n   * Update organization attributes (enabled flag, name, and policies).\n   */\n  updateOrg: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"UpdateOrgRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"UpdateOrgResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Sign Avalanche X- or P-Chain Message\n   * @description Sign Avalanche X- or P-Chain Message\n   *\n   * Signs an Avalanche message with a given SecpAva key.\n   * This is a pre-release feature.\n   */\n  avaSign: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Avalanche bech32 address format without the chain prefix\n         * @example avax1am4w6hfrvmh3akduzkjthrtgtqafalce6an8cr\n         */\n        pubkey: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"AvaSignRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"AvaSignResponse\"];\n      202: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"AcceptedResponse\"];\n        };\n      };\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Sign Bitcoin Transaction\n   * @description Sign Bitcoin Transaction\n   *\n   * Signs a Bitcoin transaction with a given key.\n   * This is a pre-release feature.\n   */\n  btcSign: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description bech32 encoding of the public key\n         * @example bc1q5p5qkae77ly80kr4pyfytdqm7rf08ddhdejl9g\n         */\n        pubkey: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"BtcSignRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"BtcSignResponse\"];\n      202: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"AcceptedResponse\"];\n        };\n      };\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Derive Key From Long-Lived Mnemonic\n   * @description Derive Key From Long-Lived Mnemonic\n   *\n   * Derives a key of a specified type using a supplied derivation path and an\n   * existing long-lived mnemonic.\n   */\n  deriveKey: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"DeriveKeyRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"CreateKeyResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Sign EIP-191 Data\n   * @description Sign EIP-191 Data\n   *\n   * Signs a message using EIP-191 personal_sign with a given Secp256k1 key.\n   */\n  eip191Sign: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Hex-encoded EVM address of the Secp256k1 key\n         * @example 0x49011adbCC3bC9c0307BB07F37Dda1a1a9c69d2E\n         */\n        pubkey: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"Eip191SignRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"Eip191Or712SignResponse\"];\n      202: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"AcceptedResponse\"];\n        };\n      };\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Sign EIP-712 Typed Data\n   * @description Sign EIP-712 Typed Data\n   *\n   * Signs typed data according to EIP-712 with a given Secp256k1 key.\n   */\n  eip712Sign: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Hex-encoded EVM address of the Secp256k1 key\n         * @example 0x49011adbCC3bC9c0307BB07F37Dda1a1a9c69d2E\n         */\n        pubkey: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"Eip712SignRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"Eip191Or712SignResponse\"];\n      202: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"AcceptedResponse\"];\n        };\n      };\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Create [IdentityProof] from CubeSigner user session\n   * @description Create [IdentityProof] from CubeSigner user session\n   *\n   * This route can be used to prove to another party that a user has a\n   * valid CubeSigner session.\n   *\n   * Clients are intended to call this route and pass the returned evidence\n   * to another service which will verify it by making a request to `/v0/org/<org_id>/identity/verify`.\n   */\n  createProofCubeSigner: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"IdentityProof\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Create [IdentityProof] from OIDC token\n   * @description Create [IdentityProof] from OIDC token\n   *\n   * Exchange an OIDC ID token (passed via the `Authorization` header) for a proof of authentication.\n   *\n   * This route can be used to prove to another party that a user has met the\n   * authentication requirements (allowed issuers & audiences) for CubeSigner\n   * without leaking their credentials.\n   *\n   * Clients are intended to call this route and pass the returned evidence to another service\n   * which will verify it by making a request to `/v0/org/<org_id>/identity/verify`.\n   */\n  createProofOidc: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"IdentityProof\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Verify identity proof\n   * @description Verify identity proof\n   *\n   * Allows a third-party to validate proof of authentication.\n   *\n   * When a third-party is provided an [IdentityProof] object, they must check its\n   * veracity by calling this endpoint\n   */\n  verifyProof: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"IdentityProof\"];\n      };\n    };\n    responses: {};\n  };\n  /**\n   * Create Key-Import Key\n   * @description Create Key-Import Key\n   *\n   * Generate an ephemeral key that a client can use for key-import encryption.\n   */\n  createKeyImportKey: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"CreateKeyImportKeyResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Import Key\n   * @description Import Key\n   *\n   * Securely imports an existing key using a previously generated key-import key.\n   */\n  importKey: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"ImportKeyRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"CreateKeyResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Invite User\n   * @description Invite User\n   *\n   * Creates a new user in an existing org and sends that user an invite email.\n   */\n  invite: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"InviteRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"EmptyImpl\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * List Keys\n   * @description List Keys\n   *\n   * Gets the list of owned keys in a given org.\n   */\n  listKeysInOrg: {\n    parameters: {\n      query?: {\n        /**\n         * @description Max number of items to return per page.\n         *\n         * If the actual number of returned items may be less that this, even if there exist more\n         * data in the result set. To reliably determine if more data is left in the result set,\n         * inspect the [UnencryptedLastEvalKey] value in the response object.\n         */\n        \"page.size\"?: number;\n        /**\n         * @description The start of the page.  Omit to start from the beginning; otherwise, only specify a\n         * the exact value previously returned as 'last_evaluated_key' from the same endpoint.\n         */\n        \"page.start\"?: components[\"schemas\"][\"LastEvalKey\"] | null;\n        /**\n         * @description Filter by key type\n         * @example SecpEthAddr\n         */\n        key_type?: components[\"schemas\"][\"KeyType\"] | null;\n      };\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"PaginatedListKeysResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Create Key\n   * @description Create Key\n   *\n   * Creates one or more new keys of the specified type.\n   */\n  createKey: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"CreateKeyRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"CreateKeyResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Get Key\n   * @description Get Key\n   *\n   * Returns the properties of a key.\n   */\n  getKeyInOrg: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description ID of the desired Key\n         * @example Key#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        key_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"KeyInfo\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Delete Key\n   * @description Delete Key\n   *\n   * Deletes a key specified by its ID.\n   * Only the key owner and org owners are allowed to delete keys.\n   */\n  deleteKey: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description ID of the desired Key\n         * @example Key#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        key_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"EmptyImpl\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Update Key\n   * @description Update Key\n   *\n   * Enable or disable a key.  The user must be the owner of the key or organization to perform this action.\n   */\n  updateKey: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description ID of the desired Key\n         * @example Key#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        key_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"UpdateKeyRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"KeyInfo\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * List Key Roles\n   * @description List Key Roles\n   *\n   * Get all roles the key is in\n   */\n  listKeyRoles: {\n    parameters: {\n      query?: {\n        /**\n         * @description Max number of items to return per page.\n         *\n         * If the actual number of returned items may be less that this, even if there exist more\n         * data in the result set. To reliably determine if more data is left in the result set,\n         * inspect the [UnencryptedLastEvalKey] value in the response object.\n         */\n        \"page.size\"?: number;\n        /**\n         * @description The start of the page.  Omit to start from the beginning; otherwise, only specify a\n         * the exact value previously returned as 'last_evaluated_key' from the same endpoint.\n         */\n        \"page.start\"?: components[\"schemas\"][\"LastEvalKey\"] | null;\n      };\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description ID of the desired Key\n         * @example Key#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        key_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"PaginatedListKeyRolesResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * List Pending MFA Requests\n   * @description List Pending MFA Requests\n   *\n   * Retrieves and returns all pending MFA requests that are accessible to the current user,\n   * i.e., those in which the current user is listed as an approver\n   */\n  mfaList: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"ListMfaResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Get Pending MFA Request\n   * @description Get Pending MFA Request\n   *\n   * Retrieves and returns a pending MFA request by its id.\n   */\n  mfaGet: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Name or ID of the desired MfaRequest\n         * @example MfaRequest#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        mfa_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"MfaRequestInfo\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Approve or Reject MFA Request\n   * @description Approve or Reject MFA Request\n   *\n   * Approve or reject request after logging in with CubeSigner.\n   *\n   * If approving, adds the currently-logged user as an approver\n   * of a pending MFA request of the [Status::RequiredApprovers] kind. If the required number of\n   * approvers is reached, the MFA request is approved; the confirmation receipt can be used to\n   * resume the original HTTP request.\n   *\n   * If rejecting, immediately deletes the pending MFA request.\n   */\n  mfaVoteCs: {\n    parameters: {\n      query?: {\n        mfa_vote?: components[\"schemas\"][\"MfaVote\"] | null;\n      };\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Name or ID of the desired MfaRequest\n         * @example MfaRequest#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        mfa_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"MfaRequestInfo\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Initiate a FIDO MFA Approval/Rejection\n   * @description Initiate a FIDO MFA Approval/Rejection\n   *\n   * Initiates the approval/rejection process of an MFA Request using FIDO.\n   */\n  mfaFidoInit: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Name or ID of the desired MfaRequest\n         * @example MfaRequest#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        mfa_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"FidoAssertChallenge\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Finalize a FIDO MFA Approval/Rejection\n   * @description Finalize a FIDO MFA Approval/Rejection\n   *\n   * If approving, adds an approver to a pending MFA request.\n   * If the required number of approvers is reached, the MFA request is approved;\n   * the confirmation receipt can be used to resume the original HTTP request.\n   *\n   * If rejecting, immediately deletes the pending MFA request.\n   */\n  mfaVoteFidoComplete: {\n    parameters: {\n      query?: {\n        mfa_vote?: components[\"schemas\"][\"MfaVote\"] | null;\n      };\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Name or ID of the desired MfaRequest\n         * @example MfaRequest#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        mfa_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"FidoAssertAnswer\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"MfaRequestInfo\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Approve/Reject a TOTP MFA Request\n   * @description Approve/Reject a TOTP MFA Request\n   *\n   * If approving, adds the current user as approver to a pending MFA request by\n   * providing TOTP code. If the required number of approvers is reached, the MFA request is\n   * approved; the confirmation receipt can be used to resume the original HTTP request.\n   *\n   * If rejecting, immediately deletes the pending MFA request.\n   */\n  mfaVoteTotp: {\n    parameters: {\n      query?: {\n        mfa_vote?: components[\"schemas\"][\"MfaVote\"] | null;\n      };\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Name or ID of the desired MfaRequest\n         * @example MfaRequest#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        mfa_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"TotpApproveRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"MfaRequestInfo\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Mint an OIDC ID token for Twitter\n   * @description Mint an OIDC ID token for Twitter\n   *\n   * This function acts identically to Twitter's [`oauth2/token`](https://developer.twitter.com/en/docs/authentication/api-reference/token) endpoint,\n   * but extends the output with an `id_token`.\n   *\n   * This `id_token` can then be used with any CubeSigner endpoint that requires an OIDC token.\n   *\n   * > [!IMPORTANT]\n   * > This endpoint will fail unless the org is configured to allow the issuer `https://shim.oauth2.cubist.dev/twitter` and client ID being used for Twitter.\n   */\n  oauth2Twitter: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": {\n          [key: string]: string;\n        };\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"TokenResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Login with OIDC\n   * @description Login with OIDC\n   *\n   * Exchange an OIDC ID token (passed via the `Authorization` header) for a signer session.\n   *\n   * MFA is required when:\n   * - an MFA policy is explicitly attached to the user logging in\n   * (e.g., an org owner can do that at user creation time to require certain kind of MFA)\n   * - the user has at least 1 MFA factor configured\n   */\n  oidcAuth: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"OidcLoginRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"NewSessionResponse\"];\n      202: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"AcceptedResponse\"];\n        };\n      };\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * List Roles\n   * @description List Roles\n   *\n   * Retrieves all roles in an organization that the current user is allowed to access.\n   */\n  listRoles: {\n    parameters: {\n      query?: {\n        /**\n         * @description Max number of items to return per page.\n         *\n         * If the actual number of returned items may be less that this, even if there exist more\n         * data in the result set. To reliably determine if more data is left in the result set,\n         * inspect the [UnencryptedLastEvalKey] value in the response object.\n         */\n        \"page.size\"?: number;\n        /**\n         * @description The start of the page.  Omit to start from the beginning; otherwise, only specify a\n         * the exact value previously returned as 'last_evaluated_key' from the same endpoint.\n         */\n        \"page.start\"?: components[\"schemas\"][\"LastEvalKey\"] | null;\n        /** @description Don't include keys and users for each role */\n        summarize?: boolean | null;\n      };\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"PaginatedListRolesResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Create Role\n   * @description Create Role\n   *\n   * Creates a new role in an organization. Unless the logged-in user\n   * is the owner, they are automatically added to the newly created role.\n   */\n  createRole: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    /** @description Optional request body to set the role name */\n    requestBody?: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"CreateRoleRequest\"] | null;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"CreateRoleResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Get Role\n   * @description Get Role\n   *\n   * Retrieves information about a role in an organization\n   */\n  getRole: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Name or ID of the desired Role\n         * @example Role#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        role_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"RoleInfo\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Delete Role\n   * @description Delete Role\n   *\n   * Deletes a role in an organization.\n   * Only users in the role can perform this action.\n   */\n  deleteRole: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Name or ID of the desired Role\n         * @example Role#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        role_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"EmptyImpl\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Update Role\n   * @description Update Role\n   *\n   * Enables or disables a role (this requires the `manage:role:update:enable` scope).\n   * Updates the role's policies (this requires the `manage:role:update:policy` scope).\n   * The user must be in the role or an owner of the organization.\n   */\n  updateRole: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Name or ID of the desired Role\n         * @example Role#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        role_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"UpdateRoleRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"RoleInfo\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Add Keys\n   * @description Add Keys\n   *\n   * Adds a list of existing keys to an existing role.\n   */\n  addKeysToRole: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Name or ID of the desired Role\n         * @example Role#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        role_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"AddKeysToRoleRequest\"];\n      };\n    };\n    responses: {};\n  };\n  /**\n   * Add User\n   * @description Add User\n   *\n   * Adds an existing user to an existing role.\n   * Only users in the role or owners can add users to a role.\n   */\n  addUserToRole: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Name or ID of the desired Role\n         * @example Role#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        role_id: string;\n        /**\n         * @description ID of the desired User\n         * @example User#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        user_id: string;\n      };\n    };\n    responses: {};\n  };\n  /**\n   * List Role Keys\n   * @description List Role Keys\n   *\n   * Returns an array of all keys in a role.\n   */\n  listRoleKeys: {\n    parameters: {\n      query?: {\n        /**\n         * @description Max number of items to return per page.\n         *\n         * If the actual number of returned items may be less that this, even if there exist more\n         * data in the result set. To reliably determine if more data is left in the result set,\n         * inspect the [UnencryptedLastEvalKey] value in the response object.\n         */\n        \"page.size\"?: number;\n        /**\n         * @description The start of the page.  Omit to start from the beginning; otherwise, only specify a\n         * the exact value previously returned as 'last_evaluated_key' from the same endpoint.\n         */\n        \"page.start\"?: components[\"schemas\"][\"LastEvalKey\"] | null;\n      };\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Name or ID of the desired Role\n         * @example Role#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        role_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"PaginatedListRoleKeysResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Remove Key\n   * @description Remove Key\n   *\n   * Removes a given key from a role\n   */\n  removeKeyFromRole: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Name or ID of the desired Role\n         * @example Role#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        role_id: string;\n        /**\n         * @description ID of the desired Key\n         * @example Key#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        key_id: string;\n      };\n    };\n    responses: {};\n  };\n  /**\n   * List a single page of Tokens (Deprecated)\n   * @deprecated\n   * @description List a single page of Tokens (Deprecated)\n   *\n   * **Deprecated**: Use `GET /org/{org_id}/session?role=`\n   *\n   * Returns all access tokens for a given role.\n   * Only users in the role or owners can create a token for it.\n   */\n  listRoleTokens: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Name or ID of the desired Role\n         * @example Role#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        role_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"ListTokensResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Create Token\n   * @description Create Token\n   *\n   * Creates a new access token for a given role (to be used as \"API Key\" for all signing actions).\n   * Only users in the role or owners can create a token for it.\n   */\n  createRoleToken: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Name or ID of the desired Role\n         * @example Role#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        role_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"CreateTokenRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"NewSessionResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Revoke All Tokens (Deprecated)\n   * @deprecated\n   * @description Revoke All Tokens (Deprecated)\n   *\n   * **Deprecated**: Use `DELETE /org/{org_id}/session?role=` instead\n   *\n   * Revokes all access tokens associated with a role.\n   * Only users in the role or owners can perform this action.\n   */\n  revokeAllRoleTokens: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Name or ID of the desired Role\n         * @example Role#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        role_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"RevokeTokensResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Revoke Token (Deprecated)\n   * @deprecated\n   * @description Revoke Token (Deprecated)\n   *\n   * **Deprecated**: Use `DELETE /org/{org_id}/session/{session_id}`\n   *\n   * Revokes an access token associated with a role.\n   * Only users in the role or owners can perform this action.\n   */\n  revokeRoleToken: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Name or ID of the desired Role\n         * @example Role#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        role_id: string;\n        /**\n         * @description The ID of the session to revoke\n         * @example 77aad2100c361f497635dd005c4d15781e2e5df4b9f45d8e74f37425cbc30b9e\n         */\n        session_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"RevokeTokenResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * List Role Users.\n   * @description List Role Users.\n   *\n   * Returns an array of all users who have access to a role.\n   */\n  listRoleUsers: {\n    parameters: {\n      query?: {\n        /**\n         * @description Max number of items to return per page.\n         *\n         * If the actual number of returned items may be less that this, even if there exist more\n         * data in the result set. To reliably determine if more data is left in the result set,\n         * inspect the [UnencryptedLastEvalKey] value in the response object.\n         */\n        \"page.size\"?: number;\n        /**\n         * @description The start of the page.  Omit to start from the beginning; otherwise, only specify a\n         * the exact value previously returned as 'last_evaluated_key' from the same endpoint.\n         */\n        \"page.start\"?: components[\"schemas\"][\"LastEvalKey\"] | null;\n      };\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Name or ID of the desired Role\n         * @example Role#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        role_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"PaginatedListRoleUsersResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Remove User\n   * @description Remove User\n   *\n   * Removes an existing user from an existing role.\n   * Only users in the role or org owners can remove users from a role.\n   */\n  removeUserFromRole: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Name or ID of the desired Role\n         * @example Role#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        role_id: string;\n        /**\n         * @description ID of the desired User\n         * @example User#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        user_id: string;\n      };\n    };\n    responses: {};\n  };\n  /**\n   * List sessions\n   * @description List sessions\n   *\n   * If no query parameters are provided, information for the current session is returned\n   */\n  listSessions: {\n    parameters: {\n      query?: {\n        /**\n         * @description Max number of items to return per page.\n         *\n         * If the actual number of returned items may be less that this, even if there exist more\n         * data in the result set. To reliably determine if more data is left in the result set,\n         * inspect the [UnencryptedLastEvalKey] value in the response object.\n         */\n        \"page.size\"?: number;\n        /**\n         * @description The start of the page.  Omit to start from the beginning; otherwise, only specify a\n         * the exact value previously returned as 'last_evaluated_key' from the same endpoint.\n         */\n        \"page.start\"?: components[\"schemas\"][\"LastEvalKey\"] | null;\n        /**\n         * @description If provided, the name or ID of a role to operate on\n         * @example my-role\n         */\n        role?: string | null;\n      };\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"PaginatedSessionsResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Create new user session (management and/or signing)\n   * @description Create new user session (management and/or signing)\n   *\n   * Creates a new user session, silently truncating requested session and auth lifetimes\n   * to be at most requestor's session and auth lifetime, respectively.\n   */\n  createSession: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"CreateSessionRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"NewSessionResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Revoke existing session(s)\n   * @description Revoke existing session(s)\n   *\n   * Immediately revokes existing sessions, preventing them from being used or refreshed.\n   * If no query params are provided, the current session is revoked.\n   */\n  revokeSessions: {\n    parameters: {\n      query?: {\n        /**\n         * @description If provided, the name or ID of a role to operate on\n         * @example my-role\n         */\n        role?: string | null;\n      };\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"SessionsResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Revoke current session\n   * @description Revoke current session\n   *\n   * Immediately revokes the current session, preventing it from being used or refreshed\n   */\n  revokeCurrentSession: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"EmptyImpl\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Get session information\n   * @description Get session information\n   */\n  getSession: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description The ID of the session to get\n         * @example 77aad2100c361f497635dd005c4d15781e2e5df4b9f45d8e74f37425cbc30b9e\n         */\n        session_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"SessionInfo\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Revoke a session\n   * @description Revoke a session\n   *\n   * Immediately revokes an existing session, preventing it from being used or refreshed\n   */\n  revokeSession: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description The ID of the session to revoke\n         * @example 77aad2100c361f497635dd005c4d15781e2e5df4b9f45d8e74f37425cbc30b9e\n         */\n        session_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"SessionInfo\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Sign Solana Message\n   * @description Sign Solana Message\n   *\n   * Signs a Solana message with a given key.\n   * This is a pre-release feature.\n   */\n  solanaSign: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description The base58-encoded public key\n         * @example 86ZRPszBp5EoPj7wR3bHn7wnAZ5iYfpasRc7DKFPTUaZ\n         */\n        pubkey: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"SolanaSignRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"SolanaSignResponse\"];\n      202: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"AcceptedResponse\"];\n        };\n      };\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Get Token-Accessible Keys\n   * @description Get Token-Accessible Keys\n   *\n   * Retrieves the keys that the role token can access.\n   */\n  listTokenKeys: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"KeyInfos\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * User Info\n   * @description User Info\n   *\n   * Retrieves information about the current user.\n   */\n  aboutMe: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"UserInfo\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * List outstanding user-export requests\n   * @description List outstanding user-export requests\n   */\n  userExportList: {\n    parameters: {\n      query?: {\n        /**\n         * @description Max number of items to return per page.\n         *\n         * If the actual number of returned items may be less that this, even if there exist more\n         * data in the result set. To reliably determine if more data is left in the result set,\n         * inspect the [UnencryptedLastEvalKey] value in the response object.\n         */\n        \"page.size\"?: number;\n        /**\n         * @description The start of the page.  Omit to start from the beginning; otherwise, only specify a\n         * the exact value previously returned as 'last_evaluated_key' from the same endpoint.\n         */\n        \"page.start\"?: components[\"schemas\"][\"LastEvalKey\"] | null;\n        /**\n         * @description If provided, the user-id whose user-export requests to list. Defaults to the\n         * current user.  Only the org owner may list requests for another user.\n         * @example User#806c9544-f1fa-4bad-8d4d-1097a1844726\n         */\n        user_id?: string | null;\n        /**\n         * @description If provided, the key-id for which to list an existing user-export request.\n         * @example Key#0x3c4d90Cc5Af1644C3A3B013Baa5488997381D7C8\n         */\n        key_id?: string | null;\n      };\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"PaginatedUserExportListResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Initiate a user-export request\n   * @description Initiate a user-export request\n   *\n   * This starts a delay (whose length is determined by Org-wide settings)\n   * before export can be completed, and returns a ticket that can be used\n   * to complete the export once the timer has expired.\n   *\n   * Only one user-export request can be active for a given key. If there\n   * is already an active export, this endpoint will return an error. To\n   * create a new request, first delete the existing one.\n   */\n  userExportInit: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"UserExportInitRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"UserExportInitResponse\"];\n      202: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"AcceptedResponse\"];\n        };\n      };\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Delete an existing user-export request\n   * @description Delete an existing user-export request\n   */\n  userExportDelete: {\n    parameters: {\n      query: {\n        /**\n         * @description The key-id whose export request should be deleted\n         * @example Key#0x3c4d90Cc5Af1644C3A3B013Baa5488997381D7C8\n         */\n        key_id: string;\n        /**\n         * @description The user-id who owns this request. If omitted, defaults to the current user.\n         * Only the org owner may delete user-export requests for another user.\n         * @example User#806c9544-f1fa-4bad-8d4d-1097a1844726\n         */\n        user_id?: string | null;\n      };\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"EmptyImpl\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Complete a user-export request\n   * @description Complete a user-export request\n   *\n   * This endpoint can be called only after initiating a user-export request via\n   * the `user_export_init` API, and only within the subsequent export window\n   * (i.e., after the export delay has passed and before the request has expired).\n   *\n   * To check on the status of an export request, see the `user_export_list` API.\n   */\n  userExportComplete: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"UserExportCompleteRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"UserExportCompleteResponse\"];\n      202: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"AcceptedResponse\"];\n        };\n      };\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Initiate registration of a FIDO key\n   * @description Initiate registration of a FIDO key\n   *\n   * Generates a challenge that must be answered to prove ownership of a key\n   */\n  userRegisterFidoInit: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"FidoCreateRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"FidoCreateChallengeResponse\"];\n      202: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"AcceptedResponse\"];\n        };\n      };\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Finalize registration of a FIDO key\n   * @description Finalize registration of a FIDO key\n   *\n   * Accepts the response to the challenge generated by the POST to this endpoint.\n   */\n  userRegisterFidoComplete: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"FidoCreateChallengeAnswer\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"EmptyImpl\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Delete FIDO key\n   * @description Delete FIDO key\n   *\n   * Deletes a FIDO key from the user's account (if the key is not the sole MFA factor). MFA is always required.\n   */\n  userDeleteFido: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Name or ID of the desired FidoKey\n         * @example FidoKey#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        fido_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"Empty\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"EmptyImpl\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Initialize TOTP Reset\n   * @description Initialize TOTP Reset\n   *\n   * Creates a new TOTP challenge that must be answered to prove that the new TOTP\n   * was successfully imported into an authenticator app.\n   *\n   * This operation is allowed if EITHER\n   * - the user account is not yet initialized and no TOTP is already set, OR\n   * - the user has not configured any auth factors;\n   * otherwise, MFA is required.\n   */\n  userResetTotpInit: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody?: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"TotpResetRequest\"] | null;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"TotpInfo\"];\n      202: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"AcceptedResponse\"];\n        };\n      };\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Delete TOTP\n   * @description Delete TOTP\n   *\n   * Deletes TOTP from the user's account (if TOTP is not the sole MFA factor). MFA is always required.\n   */\n  userDeleteTotp: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"Empty\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"EmptyImpl\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Finalize resetting TOTP\n   * @description Finalize resetting TOTP\n   *\n   * Checks if the response contains the correct TOTP code corresponding to the\n   * challenge generated by the POST method of this endpoint.\n   */\n  userResetTotpComplete: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"TotpChallengeAnswer\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"EmptyImpl\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Verify TOTP\n   * @description Verify TOTP\n   *\n   * Checks if a given code matches the current TOTP code for the current user.\n   * Errors with 403 if the current user has not set up TOTP or the code fails verification.\n   */\n  userVerifyTotp: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"TotpApproveRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"EmptyImpl\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * List users in organization\n   * @description List users in organization\n   */\n  listUsersInOrg: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"GetUsersInOrgResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Add a third-party user to the org\n   * @description Add a third-party user to the org\n   */\n  createOidcUser: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"AddThirdPartyUserRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"AddThirdPartyUserResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Remove a third-party user from the org\n   * @description Remove a third-party user from the org\n   */\n  deleteOidcUser: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"OIDCIdentity\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"EmptyImpl\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Initiate registration of a FIDO key\n   * @deprecated\n   * @description Initiate registration of a FIDO key\n   *\n   * Generates a challenge that must be answered to prove ownership of a key\n   */\n  registerFidoInitLegacy: {\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"FidoCreateRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"FidoCreateChallengeResponse\"];\n      202: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"AcceptedResponse\"];\n        };\n      };\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Finalize registration of a FIDO key\n   * @deprecated\n   * @description Finalize registration of a FIDO key\n   *\n   * Accepts the response to the challenge generated by the POST to this endpoint.\n   */\n  registerFidoCompleteLegacy: {\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"FidoCreateChallengeAnswer\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"EmptyImpl\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Initialize TOTP Reset\n   * @deprecated\n   * @description Initialize TOTP Reset\n   *\n   * Creates a new TOTP challenge that must be answered to prove that the new TOTP\n   * was successfully imported into an authenticator app.\n   *\n   * This operation is allowed if EITHER\n   * - the user account is not yet initialized and no TOTP is already set, OR\n   * - the user has not configured any auth factors;\n   * otherwise, MFA is required.\n   */\n  resetTotpInitLegacy: {\n    requestBody?: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"TotpResetRequest\"] | null;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"TotpInfo\"];\n      202: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"AcceptedResponse\"];\n        };\n      };\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Finalize resetting TOTP\n   * @deprecated\n   * @description Finalize resetting TOTP\n   *\n   * Checks if the response contains the correct TOTP code corresponding to the\n   * challenge generated by the POST method of this endpoint.\n   */\n  resetTotpCompleteLegacy: {\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"TotpChallengeAnswer\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"EmptyImpl\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Verify TOTP\n   * @deprecated\n   * @description Verify TOTP\n   *\n   * Checks if a given code matches the current TOTP code for the current user.\n   * Errors with 403 if the current user has not set up TOTP or the code fails verification.\n   */\n  verifyTotpLegacy: {\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"TotpApproveRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"EmptyImpl\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Sign Raw Blob\n   * @description Sign Raw Blob\n   *\n   * Signs an arbitrary blob with a given key.\n   * This is a pre-release feature.\n   *\n   * - ECDSA signatures are serialized as big-endian r and s plus recovery-id\n   * byte v, which can in general take any of the values 0, 1, 2, or 3.\n   *\n   * - EdDSA signatures are serialized in the standard format.\n   *\n   * - BLS signatures are not supported on the blob-sign endpoint.\n   */\n  blobSign: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description ID of the desired Key\n         * @example Key#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        key_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"BlobSignRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"BlobSignResponse\"];\n      202: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"AcceptedResponse\"];\n        };\n      };\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Record heartbeat\n   * @description Record heartbeat\n   *\n   * This endpoint is called by the cube3signer proxy to record various metrics to CloudWatch.\n   */\n  cube3signerHeartbeat: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody?: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"HeartbeatRequest\"] | null;\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"EmptyImpl\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Sign EVM Transaction\n   * @description Sign EVM Transaction\n   *\n   * Signs an Ethereum (and other EVM) transaction with a given Secp256k1 key.\n   * Returns an RLP-encoded transaction with EIP-155 signature.\n   *\n   * The key must be associated with the role and organization on whose behalf this action is called.\n   */\n  eth1Sign: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Hex-encoded ethereum address of the secp key\n         * @example 0x49011adbCC3bC9c0307BB07F37Dda1a1a9c69d2E\n         */\n        pubkey: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"Eth1SignRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"Eth1SignResponse\"];\n      202: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"AcceptedResponse\"];\n        };\n      };\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Sign Validator Request\n   * @description Sign Validator Request\n   *\n   * Signs an eth2 validator request with a given BLS key.\n   *\n   * The key must be associated with the role and organization on whose behalf this action is called.\n   */\n  eth2Sign: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Hex-encoded validator (BLS) public key with 0x prefix\n         * @example 0x9700fbb8c906942442c2a5b3ad7498f27aedda253786a6fbaa8fef47fb7af234e50cf2cce815a553087992ae565d48da\n         */\n        pubkey: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"Eth2SignRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"Eth2SignResponse\"];\n      202: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"AcceptedResponse\"];\n        };\n      };\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Sign Stake Deposit\n   * @description Sign Stake Deposit\n   *\n   * Signs a deposit transaction with a `validator_key`. If `validator_key` is set to a pregenerated key, we use the\n   * provided validator key. Otherwise, we generate a new BLS key.\n   *\n   * When using a pregenerated key, the key must be associated with the role and organization on whose\n   * behalf this action is called.\n   */\n  stake: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"StakeRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"StakeResponse\"];\n      202: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"AcceptedResponse\"];\n        };\n      };\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Sign Unstake Request\n   * @description Sign Unstake Request\n   *\n   * Handle unstaking request, producing a signed voluntary exit message\n   * that can be posted directly to the Beacon chain.\n   *\n   * The key must be associated with the role and organization on whose behalf this action is called.\n   */\n  unstake: {\n    parameters: {\n      path: {\n        /**\n         * @description Name or ID of the desired Org\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n        /**\n         * @description Hex-encoded validator (BLS) public key\n         * @example 0xa99a76ed7796f7be22d5b7e85deeb7c5677e88e511e0b337618f8c4eb61349b4bf2d153f649f7b53359fe8b94a38e44c\n         */\n        pubkey: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"UnstakeRequest\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"UnstakeResponse\"];\n      202: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"AcceptedResponse\"];\n        };\n      };\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n  /**\n   * Refresh Signer Session\n   * @description Refresh Signer Session\n   */\n  signerSessionRefresh: {\n    parameters: {\n      path: {\n        /**\n         * @description ID of the organization owning the key\n         * @example Org#124dfe3e-3bbd-487d-80c0-53c55e8ab87a\n         */\n        org_id: string;\n      };\n    };\n    requestBody: {\n      content: {\n        \"application/json\": components[\"schemas\"][\"AuthData\"];\n      };\n    };\n    responses: {\n      200: components[\"responses\"][\"NewSessionResponse\"];\n      default: {\n        content: {\n          \"application/json\": components[\"schemas\"][\"ErrorResponse\"];\n        };\n      };\n    };\n  };\n}\n"]}